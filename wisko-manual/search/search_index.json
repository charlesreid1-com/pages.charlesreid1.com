{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Wisko Manual The wisko manual. IP: 159.65.75.41 git repo - wisko manual by @charles git repo - wisko dotfiles by @charles wisko boot to root by @charles wisko FAQ by @charles locked out of wisko by @melo and @charles smallmelo.com migration: part 1 (ssh + wordpress) by @melo smallmelo.com migration: part 2 (all the things) by @melo smallmelo.com migration: part 3 (allthehatsformaps to smallmelo) by @melo wisko gitea by @charles installing geoserver and connecting over https by @melo and @charles","title":"Index"},{"location":"#wisko-manual","text":"The wisko manual. IP: 159.65.75.41 git repo - wisko manual by @charles git repo - wisko dotfiles by @charles wisko boot to root by @charles wisko FAQ by @charles locked out of wisko by @melo and @charles smallmelo.com migration: part 1 (ssh + wordpress) by @melo smallmelo.com migration: part 2 (all the things) by @melo smallmelo.com migration: part 3 (allthehatsformaps to smallmelo) by @melo wisko gitea by @charles installing geoserver and connecting over https by @melo and @charles","title":"Wisko Manual"},{"location":"boot2root/","text":"wisko Getting to a Shell Hardware wisko is a higher-end 1-CPU Digital Ocean droplet. * 1 CPU * 50 GB SSD * 2 GB RAM IP address: 159.65.75.41 Spin Up Hardware Follow the Digital Ocean steps to spin up a droplet in the SF region. Once the droplet is created, get the IP address. Pro tip: find your ssh key in ~/.ssh/id_rsa.pub and paste it in during the Droplet creation process to avoid password issues. Set DNS Records Add the following DNS records: A Record : * Record: none (set to @ automatically) * Value: 138.68.10.168 A Record : * Record: git * Value: 138.68.10.168 CNAME Record : * Record: Connect to Droplet Check that the Droplet has been booted and is listening: $ ping -c 4 138.68.10.168 PING 138.68.10.168 (138.68.10.168): 56 data bytes 64 bytes from 138.68.10.168: icmp_seq=0 ttl=56 time=28.494 ms 64 bytes from 138.68.10.168: icmp_seq=1 ttl=56 time=26.120 ms 64 bytes from 138.68.10.168: icmp_seq=2 ttl=56 time=25.972 ms 64 bytes from 138.68.10.168: icmp_seq=3 ttl=56 time=27.232 ms --- 138.68.10.168 ping statistics --- 4 packets transmitted, 4 packets received, 0.0% packet loss round-trip min/avg/max/stddev = 25.972/26.955/28.494/1.014 ms Now connect to the droplet. By default, you log in as as the root user: $ ssh root@138.68.10.168 [...bunch of login stuff...] root@ubuntu-s-1vcpu-2gb-sfo2-01:~# Now we're ready to get started. Prepare for LAMP See DO guide Make Normal User Add a non-root user: adduser melo passwd melo usermod -aG sudo melo (While we're at it, create a git user as well for gitea): adduser git passwd git Prepare to SSH as that user: mkdir /home/melo/.ssh chown melo:melo /home/melo/.ssh chmod 700 /home/melo/.ssh chmod 600 /home/melo/.ssh/authorized_key SSH as this user in a separate window (keep one window open and logged in as root!), and test sudo abilities: sudo whoami Disable root login via ssh: vim /etc/ssh/sshd_config Change PermitRootLogin to no . Restart SSH service: sudo service ssh restart Now log out and log back in as user melo. Dotfiles Bootstrap Dotfiles link Start out with the wisko dotfiles repository: apt-get install git cd ~ git clone https://charlesreid1.com:3000/dotfiles/wisko.git cd wisko Prepare for bootstrap: ./pre_bootstrap.sh Now bootstrap: ./bootstrap.sh Then set the machine name: sudo ./set_machine_name.sh Now log out and log back in. Aptitude Install a bunch of the packages that are needed: cd wisko sudo ./install_packages.sh Now we're ready to start on the LAMP server. Installing Apache sudo apt-get install -y apache2 Edit Apache config file: sudo vim /etc/apache2/sites-enabled/000-default.conf Set the server name: ServerName www.allthehatsformaps.com ... DocumentRoot /var/www/htdocs/ Also make note of Apache username, should be www-data . Check for syntax errors: sudo apache2ctl configtest Restart Apache: sudo service apache2 restart Installing MySQL sudo apt-get install -y mysql-server This will ask you to set a root password. Once the installation is complete, run: mysql_secure_installation to lock down MySQL. Do not configure VALIDATE PASSWORD PLUGIN . Installing PHP sudo apt-get install -y php libapache2-mod-php php-mcrypt php-mysql php-cli Make Apache look for index.php by editing: /etc/apache2/mods-enabled/dir.conf and changing: DirectoryIndex index.html to this: DirectoryIndex index.php index.html Restart apache: sudo service apache2 restart Installing Wordpress boom Download latest Wordpress: cd /tmp wget https://wordpress.org/latest.tar.gz tar xzf latest.tar.gz This extracts to wordpress/ . Now open MySQL and create a database for wordpress: $ mysql -u root -p mysql> CREATE DATABASE wordpress; mysql> CREATE USER 'wpsql'@'localhost' IDENTIFIED BY \"yourpasswordgoeshere\"; mysql> GRANT ALL PRIVILEGES ON wordpress.* TO \"wpsql\"@\"localhost\" This creates a MySQL user wpsql and a MySQL database called wordpress . Configure Wordpress by copying example config file to actual config file: cp wp-config-sample.php wp-config.php Edit wp-config.php and change the following: * DB_NAME * DB_USER * DB_PASSWORD * DB_HOST * DB_CHARSET * DB_COLLATE Use online secret generator to set secret key values. Now move the wordpress folder to your web root: mv wordpress /var/www/htdocs/wordpress/ Change permissions so wordpress directory is owned by the Apache user: chown -R www-data:www-data /var/www/htdocs/wordpress Visit the Wordpress site and set it up: <ip-addr-of-machine>/wordpress Once you have set up the Wordpress site, you should protect the wp-config.php file: sudo chown melo:melo wp-config.php FTP Server To upgrade Wordpress you need an ftp server running. vsftpd is a lightweight ftp server. To install it: sudo apt-get install vsftpd By default, the local_enable option is set in /etc/vsftpd.conf , meaning you can log in to the ftp server using system credentials. To check and make sure the process of uploading files via FTP works, try upgrading a plugin or installing/removing a plugin. Installing Gitea Goenv: To Manage Go Version Start by installing goenv: git clone https://github.com/syndbg/goenv.git ~/.goenv Now add .goenv to your path in .bash_profile so goenv is a command # add these line to ~/.bash_profile export GOENV_ROOT=\"$HOME/.goenv\" export PATH=\"$GOENV_ROOT/bin:$PATH\" Now source it: source ~/.bash_profile List latest versions of go: goenv install -l Pick one to install: goenv install 1.7.5 goenv global 1.7.5 Now set this as the go version: eval \"$(goenv init -)\" You will need to execute the above command each time you wish to use the goenv version of Go. (Alternatively, you can add it to .bashrc to run it in each new shell.) Gitea: Git Web Server Installation of gitea from source go get -d -u code.gitea.io/gitea cd $GOPATH/src/code.gitea.io/gitea Now check out the version of gitea that you want to use: git branch -a git checkout origin/release/v1.2 Build with tag bindata : TAGS=\"bindata\" make generate build The gitea binary is entirely self-contained. Before you run the binary, create a folder for gitea to use to store repositories (this should be somewhere you have read/write access, like ~/.gitea ): mkdir ~/.gitea We will point gitea to this directory in the next step. To run the binary from the current directory as the current user: ./gitea web Now you can navigate to <server-ip-address>:3000 to set up gitea. Set Up Gitea (via Browser) Visit <server-ip-address>:3000 in the browser to set up Gitea. You will need to set up a database, and we can use MySQL again. First, create a gitea user in MySQL: $ mysql -u root -p mysql> CREATE DATABASE gitea; mysql> CREATE USER 'giteasql'@'localhost' IDENTIFIED BY \"yourpasswordgoeshere\"; mysql> GRANT ALL PRIVILEGES ON gitea.* TO \"giteasql\"@\"localhost\" Now you should be able to punch in all your settings. Make sure you change the address of the app from localhost:3000 to <server-ip-address>:3000 . Updating Configuration/Templates The path where gitea is installed is here: /home/melo/gocode/src/code.gitea.io/gitea available as a shortcut in the home directory: $ ll ~/ ... lrwxrwxrwx 1 melo melo 30 Feb 24 22:17 gitea -> gocode/src/code.gitea.io/gitea/ Configuration file for gitea is located here: ~/gitea/custom/conf/app.ini If you change the config file or any page templates, you will have to re-build the binary for the changes to take effect. To rebuild the go binary, just set your go version with goenv and re-execute the make command from above: eval \"$(goenv init -)\" cd ~/gitea TAGS=\"bindata\" make generate build Errors Note: if you see the following error, check which version of go you are using: go build -i -v -tags 'bindata' -ldflags '-s -w -X \"main.Version=1.2.3\" -X \"main.Tags=bindata\"' -o gitea vendor/code.gitea.io/git/command.go:9:2: cannot find package \"context\" in any of: /home/melo/gocode/src/code.gitea.io/gitea/vendor/context (vendor tree) /usr/lib/go-1.6/src/context (from $GOROOT) /home/melo/gocode/src/context (from $GOPATH) Makefile:205: recipe for target 'gitea' failed make: *** [gitea] Error 1 When you run which go you should see $ which go /home/melo/.goenv/shims/go If you see this, you will have problems: $ which go /usr/bin/go","title":"Wisko Boot to Root"},{"location":"boot2root/#wisko","text":"","title":"wisko"},{"location":"boot2root/#getting-to-a-shell","text":"","title":"Getting to a Shell"},{"location":"boot2root/#hardware","text":"wisko is a higher-end 1-CPU Digital Ocean droplet. * 1 CPU * 50 GB SSD * 2 GB RAM IP address: 159.65.75.41","title":"Hardware"},{"location":"boot2root/#spin-up-hardware","text":"Follow the Digital Ocean steps to spin up a droplet in the SF region. Once the droplet is created, get the IP address. Pro tip: find your ssh key in ~/.ssh/id_rsa.pub and paste it in during the Droplet creation process to avoid password issues.","title":"Spin Up Hardware"},{"location":"boot2root/#set-dns-records","text":"Add the following DNS records: A Record : * Record: none (set to @ automatically) * Value: 138.68.10.168 A Record : * Record: git * Value: 138.68.10.168 CNAME Record : * Record:","title":"Set DNS Records"},{"location":"boot2root/#connect-to-droplet","text":"Check that the Droplet has been booted and is listening: $ ping -c 4 138.68.10.168 PING 138.68.10.168 (138.68.10.168): 56 data bytes 64 bytes from 138.68.10.168: icmp_seq=0 ttl=56 time=28.494 ms 64 bytes from 138.68.10.168: icmp_seq=1 ttl=56 time=26.120 ms 64 bytes from 138.68.10.168: icmp_seq=2 ttl=56 time=25.972 ms 64 bytes from 138.68.10.168: icmp_seq=3 ttl=56 time=27.232 ms --- 138.68.10.168 ping statistics --- 4 packets transmitted, 4 packets received, 0.0% packet loss round-trip min/avg/max/stddev = 25.972/26.955/28.494/1.014 ms Now connect to the droplet. By default, you log in as as the root user: $ ssh root@138.68.10.168 [...bunch of login stuff...] root@ubuntu-s-1vcpu-2gb-sfo2-01:~# Now we're ready to get started.","title":"Connect to Droplet"},{"location":"boot2root/#prepare-for-lamp","text":"See DO guide","title":"Prepare for LAMP"},{"location":"boot2root/#make-normal-user","text":"Add a non-root user: adduser melo passwd melo usermod -aG sudo melo (While we're at it, create a git user as well for gitea): adduser git passwd git Prepare to SSH as that user: mkdir /home/melo/.ssh chown melo:melo /home/melo/.ssh chmod 700 /home/melo/.ssh chmod 600 /home/melo/.ssh/authorized_key SSH as this user in a separate window (keep one window open and logged in as root!), and test sudo abilities: sudo whoami Disable root login via ssh: vim /etc/ssh/sshd_config Change PermitRootLogin to no . Restart SSH service: sudo service ssh restart Now log out and log back in as user melo.","title":"Make Normal User"},{"location":"boot2root/#dotfiles-bootstrap","text":"Dotfiles link Start out with the wisko dotfiles repository: apt-get install git cd ~ git clone https://charlesreid1.com:3000/dotfiles/wisko.git cd wisko Prepare for bootstrap: ./pre_bootstrap.sh Now bootstrap: ./bootstrap.sh Then set the machine name: sudo ./set_machine_name.sh Now log out and log back in.","title":"Dotfiles Bootstrap"},{"location":"boot2root/#aptitude","text":"Install a bunch of the packages that are needed: cd wisko sudo ./install_packages.sh Now we're ready to start on the LAMP server.","title":"Aptitude"},{"location":"boot2root/#installing-apache","text":"sudo apt-get install -y apache2 Edit Apache config file: sudo vim /etc/apache2/sites-enabled/000-default.conf Set the server name: ServerName www.allthehatsformaps.com ... DocumentRoot /var/www/htdocs/ Also make note of Apache username, should be www-data . Check for syntax errors: sudo apache2ctl configtest Restart Apache: sudo service apache2 restart","title":"Installing Apache"},{"location":"boot2root/#installing-mysql","text":"sudo apt-get install -y mysql-server This will ask you to set a root password. Once the installation is complete, run: mysql_secure_installation to lock down MySQL. Do not configure VALIDATE PASSWORD PLUGIN .","title":"Installing MySQL"},{"location":"boot2root/#installing-php","text":"sudo apt-get install -y php libapache2-mod-php php-mcrypt php-mysql php-cli Make Apache look for index.php by editing: /etc/apache2/mods-enabled/dir.conf and changing: DirectoryIndex index.html to this: DirectoryIndex index.php index.html Restart apache: sudo service apache2 restart","title":"Installing PHP"},{"location":"boot2root/#installing-wordpress","text":"boom Download latest Wordpress: cd /tmp wget https://wordpress.org/latest.tar.gz tar xzf latest.tar.gz This extracts to wordpress/ . Now open MySQL and create a database for wordpress: $ mysql -u root -p mysql> CREATE DATABASE wordpress; mysql> CREATE USER 'wpsql'@'localhost' IDENTIFIED BY \"yourpasswordgoeshere\"; mysql> GRANT ALL PRIVILEGES ON wordpress.* TO \"wpsql\"@\"localhost\" This creates a MySQL user wpsql and a MySQL database called wordpress . Configure Wordpress by copying example config file to actual config file: cp wp-config-sample.php wp-config.php Edit wp-config.php and change the following: * DB_NAME * DB_USER * DB_PASSWORD * DB_HOST * DB_CHARSET * DB_COLLATE Use online secret generator to set secret key values. Now move the wordpress folder to your web root: mv wordpress /var/www/htdocs/wordpress/ Change permissions so wordpress directory is owned by the Apache user: chown -R www-data:www-data /var/www/htdocs/wordpress Visit the Wordpress site and set it up: <ip-addr-of-machine>/wordpress Once you have set up the Wordpress site, you should protect the wp-config.php file: sudo chown melo:melo wp-config.php","title":"Installing Wordpress"},{"location":"boot2root/#ftp-server","text":"To upgrade Wordpress you need an ftp server running. vsftpd is a lightweight ftp server. To install it: sudo apt-get install vsftpd By default, the local_enable option is set in /etc/vsftpd.conf , meaning you can log in to the ftp server using system credentials. To check and make sure the process of uploading files via FTP works, try upgrading a plugin or installing/removing a plugin.","title":"FTP Server"},{"location":"boot2root/#installing-gitea","text":"","title":"Installing Gitea"},{"location":"boot2root/#goenv-to-manage-go-version","text":"Start by installing goenv: git clone https://github.com/syndbg/goenv.git ~/.goenv Now add .goenv to your path in .bash_profile so goenv is a command # add these line to ~/.bash_profile export GOENV_ROOT=\"$HOME/.goenv\" export PATH=\"$GOENV_ROOT/bin:$PATH\" Now source it: source ~/.bash_profile List latest versions of go: goenv install -l Pick one to install: goenv install 1.7.5 goenv global 1.7.5 Now set this as the go version: eval \"$(goenv init -)\" You will need to execute the above command each time you wish to use the goenv version of Go. (Alternatively, you can add it to .bashrc to run it in each new shell.)","title":"Goenv: To Manage Go Version"},{"location":"boot2root/#gitea-git-web-server","text":"Installation of gitea from source go get -d -u code.gitea.io/gitea cd $GOPATH/src/code.gitea.io/gitea Now check out the version of gitea that you want to use: git branch -a git checkout origin/release/v1.2 Build with tag bindata : TAGS=\"bindata\" make generate build The gitea binary is entirely self-contained. Before you run the binary, create a folder for gitea to use to store repositories (this should be somewhere you have read/write access, like ~/.gitea ): mkdir ~/.gitea We will point gitea to this directory in the next step. To run the binary from the current directory as the current user: ./gitea web Now you can navigate to <server-ip-address>:3000 to set up gitea.","title":"Gitea: Git Web Server"},{"location":"boot2root/#set-up-gitea-via-browser","text":"Visit <server-ip-address>:3000 in the browser to set up Gitea. You will need to set up a database, and we can use MySQL again. First, create a gitea user in MySQL: $ mysql -u root -p mysql> CREATE DATABASE gitea; mysql> CREATE USER 'giteasql'@'localhost' IDENTIFIED BY \"yourpasswordgoeshere\"; mysql> GRANT ALL PRIVILEGES ON gitea.* TO \"giteasql\"@\"localhost\" Now you should be able to punch in all your settings. Make sure you change the address of the app from localhost:3000 to <server-ip-address>:3000 .","title":"Set Up Gitea (via Browser)"},{"location":"boot2root/#updating-configurationtemplates","text":"The path where gitea is installed is here: /home/melo/gocode/src/code.gitea.io/gitea available as a shortcut in the home directory: $ ll ~/ ... lrwxrwxrwx 1 melo melo 30 Feb 24 22:17 gitea -> gocode/src/code.gitea.io/gitea/ Configuration file for gitea is located here: ~/gitea/custom/conf/app.ini If you change the config file or any page templates, you will have to re-build the binary for the changes to take effect. To rebuild the go binary, just set your go version with goenv and re-execute the make command from above: eval \"$(goenv init -)\" cd ~/gitea TAGS=\"bindata\" make generate build","title":"Updating Configuration/Templates"},{"location":"boot2root/#errors","text":"Note: if you see the following error, check which version of go you are using: go build -i -v -tags 'bindata' -ldflags '-s -w -X \"main.Version=1.2.3\" -X \"main.Tags=bindata\"' -o gitea vendor/code.gitea.io/git/command.go:9:2: cannot find package \"context\" in any of: /home/melo/gocode/src/code.gitea.io/gitea/vendor/context (vendor tree) /usr/lib/go-1.6/src/context (from $GOROOT) /home/melo/gocode/src/context (from $GOPATH) Makefile:205: recipe for target 'gitea' failed make: *** [gitea] Error 1 When you run which go you should see $ which go /home/melo/.goenv/shims/go If you see this, you will have problems: $ which go /usr/bin/go","title":"Errors"},{"location":"faq/","text":"wisko FAQ Apache Link: Apache on the Ubuntu Wiki Apache 2 was installed using the command apt-get install apache2 . running apache2 To start, restart, or stop apache2 (it should start automatically on boot): $ sudo service apache2 start $ sudo service apache2 restart $ sudo service apache2 stop apache2 configuration files Apache keeps its configuration files in /etc/apache2/ . Apache is configured to host multiple websites, so there are multiple configuration files. The global Apache config file is /etc/apache2/apache2.conf . Site-specific Apache config files are in /etc/apache2/sites-available . To make a new site, just add a new file to that folder (name it whatever you'd like). There is an existing default configuration in that folder. The site configuration file is where you edit the folder it serves up, the port it listens on, what requests it is listening for (subdomain or full domain), etc. When you have edited a site's configuration file, enable it using the a2ensite command: $ a2ensite name_of_site Likewise, disable the site with a2dissite : $ a2dissite name_of_site PHP Link: LAMP Server on Ubuntu Wiki PHP was installed using aptitude. running php PHP is a programming language designed for web browsers, so you don't need to start it - Apache will handle that. (Apache has a PHP module that has been enabled.) php configuration files PHP also has multiple configuration files, but we're only interested in the Apache-PHP configuration file at /etc/php5/apache2/php.ini . The main thing that you would change here is the max file upload size (10 MB by default) and whether PHP prints out errors (\"debug\" mode). MySQL Link: MySQL on Ubuntu Wiki MySQL server was installed using aptitude. networking MySQL will listen on port 3306 for incoming requests on the local machine only (it is bound to the address 127.0.0.1:3306). That means no outside computers can communicate with MySQL. This can be changed in the configuration file. running mysql To run the MySQL server in the background (it should start automatically on boot), run: $ sudo service mysql start To get a MySQL shell, run MySQL from the command line: $ mysql -u root -p This will prompt you for your MySQL password. To make a new MySQL user, log in as the root user and run: mysql> CREATE USER 'newuser'@'localhost' IDENTIFIED BY \"newpassword\"; To create a database and give the new user permission to edit that database: mysql> CREATE DATABASE newdb; mysql> GRANT ALL PRIVILEGES ON newdb.* TO \"newuser\"@\"localhost\"; MySQL is picky about quotations. mysql configuration files The main MySQL configuration file is in /etc/mysql/mysql.cnf . The MySQL configuration file that you should edit is at /etc/mysql/mysql.conf.d/mysql.cnf . Gitea gitea locations Gitea was installed using go get , which integrates Go with Github. The command checked out a copy of the code in the directory specified by $GOCODE , which is at ~/gocode . The gitea source is located in /home/melo/gocode/src/code.gitea.io/gitea/ , which is symlinked to ~melo/gitea/ . running gitea Gitea will not run on boot - a startup service needs to be added in /etc/init.d/gitea that will run the gitea command as user melo . The Gitea web server is a binary Go program that bundles together everything it needs to run. The binary is built and run in the directory ~melo/gocode/src/code.gitea.io/gitea (both as the user melo ). To run the binary, you would execute it with the \"web\" argument: $ cd ~/gocode/src/code.gitea.io/gitea/ $ ./gitea web However, this starts the process in the foreground, so it's more convenient to run it in a screen (which allows you to detach from a shell, end your session, and reattach to that shell in a later session). $ screen -d -m -S giteaweb $HOME/gocode/src/code.gitea.io/gitea/gitea web This will start a new screen in detached mode ( -d -m ), call it giteaweb ( -S ), and run the command gitea web . To reattach, list your screens using the -ls flag and reattach using the -r flag: $ screen -ls $ screen -r giteaweb rebuilding gitea The gitea source directory at ~/gocode/src/code.gitea.io/gitea is a cloned git repository, so you can check out different versions or branches as needed. If you make changes to the configuration file or template files, you will also need to re-make the gitea binary (since all of that is bundled up in the binary). To remake the binary: $ cd $GOCODE/src/code.gitea.io/gitea/ # here you can do stuff like # git branch -a # git checkout v1.3 $ TAGS=\"bindata\" make generate build","title":"Wisko FAQ"},{"location":"faq/#wisko-faq","text":"","title":"wisko FAQ"},{"location":"faq/#apache","text":"Link: Apache on the Ubuntu Wiki Apache 2 was installed using the command apt-get install apache2 .","title":"Apache"},{"location":"faq/#running-apache2","text":"To start, restart, or stop apache2 (it should start automatically on boot): $ sudo service apache2 start $ sudo service apache2 restart $ sudo service apache2 stop","title":"running apache2"},{"location":"faq/#apache2-configuration-files","text":"Apache keeps its configuration files in /etc/apache2/ . Apache is configured to host multiple websites, so there are multiple configuration files. The global Apache config file is /etc/apache2/apache2.conf . Site-specific Apache config files are in /etc/apache2/sites-available . To make a new site, just add a new file to that folder (name it whatever you'd like). There is an existing default configuration in that folder. The site configuration file is where you edit the folder it serves up, the port it listens on, what requests it is listening for (subdomain or full domain), etc. When you have edited a site's configuration file, enable it using the a2ensite command: $ a2ensite name_of_site Likewise, disable the site with a2dissite : $ a2dissite name_of_site","title":"apache2 configuration files"},{"location":"faq/#php","text":"Link: LAMP Server on Ubuntu Wiki PHP was installed using aptitude.","title":"PHP"},{"location":"faq/#running-php","text":"PHP is a programming language designed for web browsers, so you don't need to start it - Apache will handle that. (Apache has a PHP module that has been enabled.)","title":"running php"},{"location":"faq/#php-configuration-files","text":"PHP also has multiple configuration files, but we're only interested in the Apache-PHP configuration file at /etc/php5/apache2/php.ini . The main thing that you would change here is the max file upload size (10 MB by default) and whether PHP prints out errors (\"debug\" mode).","title":"php configuration files"},{"location":"faq/#mysql","text":"Link: MySQL on Ubuntu Wiki MySQL server was installed using aptitude.","title":"MySQL"},{"location":"faq/#networking","text":"MySQL will listen on port 3306 for incoming requests on the local machine only (it is bound to the address 127.0.0.1:3306). That means no outside computers can communicate with MySQL. This can be changed in the configuration file.","title":"networking"},{"location":"faq/#running-mysql","text":"To run the MySQL server in the background (it should start automatically on boot), run: $ sudo service mysql start To get a MySQL shell, run MySQL from the command line: $ mysql -u root -p This will prompt you for your MySQL password. To make a new MySQL user, log in as the root user and run: mysql> CREATE USER 'newuser'@'localhost' IDENTIFIED BY \"newpassword\"; To create a database and give the new user permission to edit that database: mysql> CREATE DATABASE newdb; mysql> GRANT ALL PRIVILEGES ON newdb.* TO \"newuser\"@\"localhost\"; MySQL is picky about quotations.","title":"running mysql"},{"location":"faq/#mysql-configuration-files","text":"The main MySQL configuration file is in /etc/mysql/mysql.cnf . The MySQL configuration file that you should edit is at /etc/mysql/mysql.conf.d/mysql.cnf .","title":"mysql configuration files"},{"location":"faq/#gitea","text":"","title":"Gitea"},{"location":"faq/#gitea-locations","text":"Gitea was installed using go get , which integrates Go with Github. The command checked out a copy of the code in the directory specified by $GOCODE , which is at ~/gocode . The gitea source is located in /home/melo/gocode/src/code.gitea.io/gitea/ , which is symlinked to ~melo/gitea/ .","title":"gitea locations"},{"location":"faq/#running-gitea","text":"Gitea will not run on boot - a startup service needs to be added in /etc/init.d/gitea that will run the gitea command as user melo . The Gitea web server is a binary Go program that bundles together everything it needs to run. The binary is built and run in the directory ~melo/gocode/src/code.gitea.io/gitea (both as the user melo ). To run the binary, you would execute it with the \"web\" argument: $ cd ~/gocode/src/code.gitea.io/gitea/ $ ./gitea web However, this starts the process in the foreground, so it's more convenient to run it in a screen (which allows you to detach from a shell, end your session, and reattach to that shell in a later session). $ screen -d -m -S giteaweb $HOME/gocode/src/code.gitea.io/gitea/gitea web This will start a new screen in detached mode ( -d -m ), call it giteaweb ( -S ), and run the command gitea web . To reattach, list your screens using the -ls flag and reattach using the -r flag: $ screen -ls $ screen -r giteaweb","title":"running gitea"},{"location":"faq/#rebuilding-gitea","text":"The gitea source directory at ~/gocode/src/code.gitea.io/gitea is a cloned git repository, so you can check out different versions or branches as needed. If you make changes to the configuration file or template files, you will also need to re-make the gitea binary (since all of that is bundled up in the binary). To remake the binary: $ cd $GOCODE/src/code.gitea.io/gitea/ # here you can do stuff like # git branch -a # git checkout v1.3 $ TAGS=\"bindata\" make generate build","title":"rebuilding gitea"},{"location":"geoserver-https/","text":"Installing Geoserver & Connecting Over HTTPS Installing Geoserver instructions Install JRE 8 install jre 8 sudo apt-get update sudo apt-get install default-jre Create geoserver folder in /usr/share : mkdir geoserver Downloaded geoserver on my computer, then ftp it to wisko Download geoserver files on my computer unzip copy files from the geoserver folder onto wisko: from my computer: scp -r /Users/melo/Desktop/geoserver-2.13.0 melo@159.65.75.41:/usr/share/geoserver permission denied. fixed with: sudo chown -R $USER:$USER /usr/share/geoserver but then i decided to use FileZilla to transfer the files once I fixed my pemissions. Maybe another day, scp. add env variable echo \"export GEOSERVER_HOME=/usr/share/geoserver\" >\\> ~/.profile make myself the owner sudo chown -R USER_NAME /usr/share/geoserver/ start geoserver cd /usr/share/geoserver/bin sh startup.sh setting up certs To enable SSL connections to the geoserver, let Apache handle the SSL connections, and then pass the requests on to geoserver locally. Apache already has certificates living at: /etc/letsencrypt/live/smallmelo.com and an HTTPS configuration file at: /etc/apache2/sites-avaiable/smallmelo-le-ssl.conf Modify the SSL configuration file to accept any URLs ending in geoserver/ and forward them to the geoserver on port 8080. There should be a <VirtualHost> block that controls the settings for HTTPS requests. Add a <Location> block to configure the behavior for geoserver URLs (note the order): <VirtualHost *:443> ... # This block is new: <Location /geoserver> ProxyPass http://localhost:8080/geoserver ProxyPassReverse http://localhost:8080/geoserver Order allow,deny Allow from all </Location> ... # This must come after /geoserver block <Directory /var/www/smallmelo/public_html> ... </Directory> </Location> Note that the reverse proxy we have set up will forward requests unencrypted to the geoserver at port 8080, but because this happens within a single machine, there is no need to encrypt it. Now ensure the proxy mod is installed: $ a2enmod proxy and restart the server: $ sudo service apache2 restart One other thing we had to do was ensure that Jetty/geoserver were only listening for requests locally. This requies binding Jetty to the IP address 127.0.0.1. To do this, we modify one parameter in app.ini : jetty.host=127.0.0.1 Restart geoserver: killall geoserver && sh /usr/share/geoserver/bin/startup.sh Finishing Touches Because Geosever was setup in order to be used in a dev environment for an xcode project, we needed to be able to ping a wms service from the site. The attempt resulted in an error . This line demonstrates that your network trace is seeing \"localhost:8080\", which it should not. So, it's an indication that the server might be returning URLs to resources that say \"localhost:8080\" The solution: Update the proxy url in Geoserver's Global Settings:","title":"Connecting to Geoserver Over HTTPS"},{"location":"geoserver-https/#installing-geoserver-connecting-over-https","text":"Installing Geoserver instructions","title":"Installing Geoserver &amp; Connecting Over HTTPS"},{"location":"geoserver-https/#install-jre-8","text":"install jre 8 sudo apt-get update sudo apt-get install default-jre","title":"Install JRE 8"},{"location":"geoserver-https/#create-geoserver-folder","text":"in /usr/share : mkdir geoserver","title":"Create geoserver folder"},{"location":"geoserver-https/#downloaded-geoserver-on-my-computer-then-ftp-it-to-wisko","text":"Download geoserver files on my computer unzip copy files from the geoserver folder onto wisko: from my computer: scp -r /Users/melo/Desktop/geoserver-2.13.0 melo@159.65.75.41:/usr/share/geoserver permission denied. fixed with: sudo chown -R $USER:$USER /usr/share/geoserver but then i decided to use FileZilla to transfer the files once I fixed my pemissions. Maybe another day, scp.","title":"Downloaded geoserver on my computer, then ftp it to wisko"},{"location":"geoserver-https/#add-env-variable","text":"echo \"export GEOSERVER_HOME=/usr/share/geoserver\" >\\> ~/.profile","title":"add env variable"},{"location":"geoserver-https/#make-myself-the-owner","text":"sudo chown -R USER_NAME /usr/share/geoserver/","title":"make myself the owner"},{"location":"geoserver-https/#start-geoserver","text":"cd /usr/share/geoserver/bin sh startup.sh","title":"start geoserver"},{"location":"geoserver-https/#setting-up-certs","text":"To enable SSL connections to the geoserver, let Apache handle the SSL connections, and then pass the requests on to geoserver locally. Apache already has certificates living at: /etc/letsencrypt/live/smallmelo.com and an HTTPS configuration file at: /etc/apache2/sites-avaiable/smallmelo-le-ssl.conf Modify the SSL configuration file to accept any URLs ending in geoserver/ and forward them to the geoserver on port 8080. There should be a <VirtualHost> block that controls the settings for HTTPS requests. Add a <Location> block to configure the behavior for geoserver URLs (note the order): <VirtualHost *:443> ... # This block is new: <Location /geoserver> ProxyPass http://localhost:8080/geoserver ProxyPassReverse http://localhost:8080/geoserver Order allow,deny Allow from all </Location> ... # This must come after /geoserver block <Directory /var/www/smallmelo/public_html> ... </Directory> </Location> Note that the reverse proxy we have set up will forward requests unencrypted to the geoserver at port 8080, but because this happens within a single machine, there is no need to encrypt it. Now ensure the proxy mod is installed: $ a2enmod proxy and restart the server: $ sudo service apache2 restart One other thing we had to do was ensure that Jetty/geoserver were only listening for requests locally. This requies binding Jetty to the IP address 127.0.0.1. To do this, we modify one parameter in app.ini : jetty.host=127.0.0.1 Restart geoserver: killall geoserver && sh /usr/share/geoserver/bin/startup.sh","title":"setting up certs"},{"location":"geoserver-https/#finishing-touches","text":"Because Geosever was setup in order to be used in a dev environment for an xcode project, we needed to be able to ping a wms service from the site. The attempt resulted in an error . This line demonstrates that your network trace is seeing \"localhost:8080\", which it should not. So, it's an indication that the server might be returning URLs to resources that say \"localhost:8080\"","title":"Finishing Touches"},{"location":"geoserver-https/#the-solution","text":"Update the proxy url in Geoserver's Global Settings:","title":"The solution:"},{"location":"locked-out/","text":"locked out of wisko no problem, i got this. $ ssh melo@159.65.75.41 ECDSA key fingerprint is ... Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added '159.65.75.41' (ECDSA) to the list of known hosts. melo@159.65.75.41: Permission denied (publickey). oh, so i have to generate a new key pair. lemme google that. creating a new public key help from do ssh-keygen -t rsa Enter file in which to save the key (/Users/melo/.ssh/id_rsa): hit enter to store in user ssh root folder Enter passphrase (empty for no passphrase): Enter same passphrase again hit enter to store without passphrase copy key to do account run from the command line: cat ~/.ssh/id_rsa.pub open settings > security in do, selection to add new key paste in the above key and name it accordingly login/ add my key to the server ( WARNING: possibly bad to run these commands.) cat ~/.ssh/id_rsa.pub | ssh melo@159.65.75.41 \"cat >> /home/melo/.ssh/authorized_keys\" melo@159.65.75.41: Permission denied (publickey). no? cat ~/.ssh/id\\_rsa.pub | ssh root@159.65.75.41 \"cat >> ~/.ssh/authorized\\_keys\" root@159.65.75.41: Permission denied (publickey). oh yea, charles turned off root access via command line. ssh debug mode w/ charles ssh -vvv melo@159.65.75.41 root@159.65.75.41: Permission denied (publickey). Melo:~ melo$ ssh -vvv melo@159.65.75.41 OpenSSH_7.6p1, LibreSSL 2.6.2 debug1: Reading configuration data /Users/melo/.ssh/config debug1: Reading configuration data /etc/ssh/ssh_config debug1: /etc/ssh/ssh_config line 48: Applying options for * debug2: ssh_connect_direct: needpriv 0 debug1: Connecting to 159.65.75.41 port 22. debug1: Connection established. debug1: identity file /Users/melo/.ssh/id_rsa type 0 debug1: key_load_public: No such file or directory debug1: identity file /Users/melo/.ssh/id_rsa-cert type -1 debug1: key_load_public: No such file or directory debug1: identity file /Users/melo/.ssh/id_dsa type -1 debug1: key_load_public: No such file or directory debug1: identity file /Users/melo/.ssh/id_dsa-cert type -1 debug1: key_load_public: No such file or directory debug1: identity file /Users/melo/.ssh/id_ecdsa type -1 debug1: key_load_public: No such file or directory debug1: identity file /Users/melo/.ssh/id_ecdsa-cert type -1 debug1: key_load_public: No such file or directory debug1: identity file /Users/melo/.ssh/id_ed25519 type -1 debug1: key_load_public: No such file or directory debug1: identity file /Users/melo/.ssh/id_ed25519-cert type -1 debug1: Local version string SSH-2.0-OpenSSH_7.6 debug1: Remote protocol version 2.0, remote software version OpenSSH_7.2p2 Ubuntu-4ubuntu2.4 debug1: match: OpenSSH_7.2p2 Ubuntu-4ubuntu2.4 pat OpenSSH* compat 0x04000000 debug3: fd 5 is O_NONBLOCK debug1: Authenticating to 159.65.75.41:22 as 'melo' debug3: hostkeys_foreach: reading file \"/Users/melo/.ssh/known_hosts\" debug3: record_hostkey: found key type ECDSA in file /Users/melo/.ssh/known_hosts:20 debug3: load_hostkeys: loaded 1 keys from 159.65.75.41 debug3: order_hostkeyalgs: prefer hostkeyalgs: ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521 debug3: send packet: type 20 debug1: SSH2_MSG_KEXINIT sent debug3: receive packet: type 20 debug1: SSH2_MSG_KEXINIT received debug2: local client KEXINIT proposal debug2: KEX algorithms: curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha256,diffie-hellman-group14-sha1,ext-info-c debug2: host key algorithms: ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519-cert-v01@openssh.com,ssh-rsa-cert-v01@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256,ssh-rsa debug2: ciphers ctos: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com debug2: ciphers stoc: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com debug2: MACs ctos: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 debug2: MACs stoc: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 debug2: compression ctos: none,zlib@openssh.com,zlib debug2: compression stoc: none,zlib@openssh.com,zlib debug2: languages ctos: debug2: languages stoc: debug2: first_kex_follows 0 debug2: reserved 0 debug2: peer server KEXINIT proposal debug2: KEX algorithms: curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1 debug2: host key algorithms: ssh-rsa,rsa-sha2-512,rsa-sha2-256,ecdsa-sha2-nistp256,ssh-ed25519 debug2: ciphers ctos: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com debug2: ciphers stoc: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com debug2: MACs ctos: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 debug2: MACs stoc: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 debug2: compression ctos: none,zlib@openssh.com debug2: compression stoc: none,zlib@openssh.com debug2: languages ctos: debug2: languages stoc: debug2: first_kex_follows 0 debug2: reserved 0 debug1: kex: algorithm: curve25519-sha256@libssh.org debug1: kex: host key algorithm: ecdsa-sha2-nistp256 debug1: kex: server->client cipher: chacha20-poly1305@openssh.com MAC: <implicit> compression: none debug1: kex: client->server cipher: chacha20-poly1305@openssh.com MAC: <implicit> compression: none debug3: send packet: type 30 debug1: expecting SSH2_MSG_KEX_ECDH_REPLY debug3: receive packet: type 31 debug1: Server host key: ecdsa-sha2-nistp256 SHA256:y1jQr+0TsjhrdM3TGWSZ/BGNdzxrK7u+hUXS/TzS1ss debug3: hostkeys_foreach: reading file \"/Users/melo/.ssh/known_hosts\" debug3: record_hostkey: found key type ECDSA in file /Users/melo/.ssh/known_hosts:20 debug3: load_hostkeys: loaded 1 keys from 159.65.75.41 debug1: Host '159.65.75.41' is known and matches the ECDSA host key. debug1: Found key in /Users/melo/.ssh/known_hosts:20 debug3: send packet: type 21 debug2: set_newkeys: mode 1 debug1: rekey after 134217728 blocks debug1: SSH2_MSG_NEWKEYS sent debug1: expecting SSH2_MSG_NEWKEYS debug3: receive packet: type 21 debug1: SSH2_MSG_NEWKEYS received debug2: set_newkeys: mode 0 debug1: rekey after 134217728 blocks debug2: key: /Users/melo/.ssh/id_rsa (0x7f897241b200) debug2: key: /Users/melo/.ssh/id_dsa (0x0) debug2: key: /Users/melo/.ssh/id_ecdsa (0x0) debug2: key: /Users/melo/.ssh/id_ed25519 (0x0) debug3: send packet: type 5 debug3: receive packet: type 7 debug1: SSH2_MSG_EXT_INFO received debug1: kex_input_ext_info: server-sig-algs=<rsa-sha2-256,rsa-sha2-512> debug3: receive packet: type 6 debug2: service_accept: ssh-userauth debug1: SSH2_MSG_SERVICE_ACCEPT received debug3: send packet: type 50 debug3: receive packet: type 51 debug1: Authentications that can continue: publickey debug3: start over, passed a different list publickey debug3: preferred publickey,keyboard-interactive,password debug3: authmethod_lookup publickey debug3: remaining preferred: keyboard-interactive,password debug3: authmethod_is_enabled publickey debug1: Next authentication method: publickey debug1: Offering public key: RSA SHA256:iIOTgB1gfdbEi11gdn426XlamlH53riKdLqImE22zi8 /Users/melo/.ssh/id_rsa debug3: send_pubkey_test debug3: send packet: type 50 debug2: we sent a publickey packet, wait for reply debug3: receive packet: type 51 debug1: Authentications that can continue: publickey debug1: Trying private key: /Users/melo/.ssh/id_dsa debug3: no such identity: /Users/melo/.ssh/id_dsa: No such file or directory debug1: Trying private key: /Users/melo/.ssh/id_ecdsa debug3: no such identity: /Users/melo/.ssh/id_ecdsa: No such file or directory debug1: Trying private key: /Users/melo/.ssh/id_ed25519 debug3: no such identity: /Users/melo/.ssh/id_ed25519: No such file or directory debug2: we did not send a packet, disable method debug1: No more authentication methods to try. melo@159.65.75.41: Permission denied (publickey). Error message is totally unhelpful. Googling turns up some problems with file permissions and with public key access being disabled in SSH config file. Logged in via DO, opened a console on the machine (Droplets > More > Access console), and found that the ssh folder was owned by root. Nobody can log in via ssh. Charles updated the permissions: sudo chown -R melo:melo ~/.ssh sudo chmod 700 ~/.ssh sudo chmod 600 ~/.ssh/* This still didn't work. Finally, uninstalling/reinstalling openssh did the trick: sudo apt-get purge openssh-client openssh-server sudo apt-get install openssh-client openssh-server then remove the .ssh folder in the root user's home directory. Regenerate the keys as the root user: ssh-keygen Now the machine should be ready to run the reinstalled SSH server. To enable passwordless access, assuming you are connecting from a local machine (Mac) to a remote machine (wisko): On the Mac: generate your ssh key: ssh-keygen print your public key to the screen: cat ~/.ssh/id_rsa.pub Copy this key to the clipboard. On the Mac, log in to wisko: ssh melo@<wisko-ip> Once you are logged in, edit the following file with your favorite text editor (e.g., nano): nano ~/.ssh/authorized_keys Add the public key from your Mac as the last line of the file. Save it and close it. Now test out your passwordless access: SSH from the Mac to wisko. The changes should take effect immediately. Link to Uncle Chucky's Passwordless SSH Login Guide","title":"Locked Out of Wisko"},{"location":"locked-out/#locked-out-of-wisko","text":"no problem, i got this. $ ssh melo@159.65.75.41 ECDSA key fingerprint is ... Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added '159.65.75.41' (ECDSA) to the list of known hosts. melo@159.65.75.41: Permission denied (publickey). oh, so i have to generate a new key pair. lemme google that.","title":"locked out of wisko"},{"location":"locked-out/#creating-a-new-public-key","text":"help from do ssh-keygen -t rsa Enter file in which to save the key (/Users/melo/.ssh/id_rsa): hit enter to store in user ssh root folder Enter passphrase (empty for no passphrase): Enter same passphrase again hit enter to store without passphrase","title":"creating a new public key"},{"location":"locked-out/#copy-key-to-do-account","text":"run from the command line: cat ~/.ssh/id_rsa.pub open settings > security in do, selection to add new key paste in the above key and name it accordingly","title":"copy key to do account"},{"location":"locked-out/#login-add-my-key-to-the-server","text":"( WARNING: possibly bad to run these commands.) cat ~/.ssh/id_rsa.pub | ssh melo@159.65.75.41 \"cat >> /home/melo/.ssh/authorized_keys\" melo@159.65.75.41: Permission denied (publickey). no? cat ~/.ssh/id\\_rsa.pub | ssh root@159.65.75.41 \"cat >> ~/.ssh/authorized\\_keys\" root@159.65.75.41: Permission denied (publickey). oh yea, charles turned off root access via command line.","title":"login/ add my key to the server"},{"location":"locked-out/#ssh-debug-mode-w-charles","text":"ssh -vvv melo@159.65.75.41 root@159.65.75.41: Permission denied (publickey). Melo:~ melo$ ssh -vvv melo@159.65.75.41 OpenSSH_7.6p1, LibreSSL 2.6.2 debug1: Reading configuration data /Users/melo/.ssh/config debug1: Reading configuration data /etc/ssh/ssh_config debug1: /etc/ssh/ssh_config line 48: Applying options for * debug2: ssh_connect_direct: needpriv 0 debug1: Connecting to 159.65.75.41 port 22. debug1: Connection established. debug1: identity file /Users/melo/.ssh/id_rsa type 0 debug1: key_load_public: No such file or directory debug1: identity file /Users/melo/.ssh/id_rsa-cert type -1 debug1: key_load_public: No such file or directory debug1: identity file /Users/melo/.ssh/id_dsa type -1 debug1: key_load_public: No such file or directory debug1: identity file /Users/melo/.ssh/id_dsa-cert type -1 debug1: key_load_public: No such file or directory debug1: identity file /Users/melo/.ssh/id_ecdsa type -1 debug1: key_load_public: No such file or directory debug1: identity file /Users/melo/.ssh/id_ecdsa-cert type -1 debug1: key_load_public: No such file or directory debug1: identity file /Users/melo/.ssh/id_ed25519 type -1 debug1: key_load_public: No such file or directory debug1: identity file /Users/melo/.ssh/id_ed25519-cert type -1 debug1: Local version string SSH-2.0-OpenSSH_7.6 debug1: Remote protocol version 2.0, remote software version OpenSSH_7.2p2 Ubuntu-4ubuntu2.4 debug1: match: OpenSSH_7.2p2 Ubuntu-4ubuntu2.4 pat OpenSSH* compat 0x04000000 debug3: fd 5 is O_NONBLOCK debug1: Authenticating to 159.65.75.41:22 as 'melo' debug3: hostkeys_foreach: reading file \"/Users/melo/.ssh/known_hosts\" debug3: record_hostkey: found key type ECDSA in file /Users/melo/.ssh/known_hosts:20 debug3: load_hostkeys: loaded 1 keys from 159.65.75.41 debug3: order_hostkeyalgs: prefer hostkeyalgs: ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521 debug3: send packet: type 20 debug1: SSH2_MSG_KEXINIT sent debug3: receive packet: type 20 debug1: SSH2_MSG_KEXINIT received debug2: local client KEXINIT proposal debug2: KEX algorithms: curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha256,diffie-hellman-group14-sha1,ext-info-c debug2: host key algorithms: ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519-cert-v01@openssh.com,ssh-rsa-cert-v01@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256,ssh-rsa debug2: ciphers ctos: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com debug2: ciphers stoc: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com debug2: MACs ctos: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 debug2: MACs stoc: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 debug2: compression ctos: none,zlib@openssh.com,zlib debug2: compression stoc: none,zlib@openssh.com,zlib debug2: languages ctos: debug2: languages stoc: debug2: first_kex_follows 0 debug2: reserved 0 debug2: peer server KEXINIT proposal debug2: KEX algorithms: curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1 debug2: host key algorithms: ssh-rsa,rsa-sha2-512,rsa-sha2-256,ecdsa-sha2-nistp256,ssh-ed25519 debug2: ciphers ctos: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com debug2: ciphers stoc: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com debug2: MACs ctos: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 debug2: MACs stoc: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1 debug2: compression ctos: none,zlib@openssh.com debug2: compression stoc: none,zlib@openssh.com debug2: languages ctos: debug2: languages stoc: debug2: first_kex_follows 0 debug2: reserved 0 debug1: kex: algorithm: curve25519-sha256@libssh.org debug1: kex: host key algorithm: ecdsa-sha2-nistp256 debug1: kex: server->client cipher: chacha20-poly1305@openssh.com MAC: <implicit> compression: none debug1: kex: client->server cipher: chacha20-poly1305@openssh.com MAC: <implicit> compression: none debug3: send packet: type 30 debug1: expecting SSH2_MSG_KEX_ECDH_REPLY debug3: receive packet: type 31 debug1: Server host key: ecdsa-sha2-nistp256 SHA256:y1jQr+0TsjhrdM3TGWSZ/BGNdzxrK7u+hUXS/TzS1ss debug3: hostkeys_foreach: reading file \"/Users/melo/.ssh/known_hosts\" debug3: record_hostkey: found key type ECDSA in file /Users/melo/.ssh/known_hosts:20 debug3: load_hostkeys: loaded 1 keys from 159.65.75.41 debug1: Host '159.65.75.41' is known and matches the ECDSA host key. debug1: Found key in /Users/melo/.ssh/known_hosts:20 debug3: send packet: type 21 debug2: set_newkeys: mode 1 debug1: rekey after 134217728 blocks debug1: SSH2_MSG_NEWKEYS sent debug1: expecting SSH2_MSG_NEWKEYS debug3: receive packet: type 21 debug1: SSH2_MSG_NEWKEYS received debug2: set_newkeys: mode 0 debug1: rekey after 134217728 blocks debug2: key: /Users/melo/.ssh/id_rsa (0x7f897241b200) debug2: key: /Users/melo/.ssh/id_dsa (0x0) debug2: key: /Users/melo/.ssh/id_ecdsa (0x0) debug2: key: /Users/melo/.ssh/id_ed25519 (0x0) debug3: send packet: type 5 debug3: receive packet: type 7 debug1: SSH2_MSG_EXT_INFO received debug1: kex_input_ext_info: server-sig-algs=<rsa-sha2-256,rsa-sha2-512> debug3: receive packet: type 6 debug2: service_accept: ssh-userauth debug1: SSH2_MSG_SERVICE_ACCEPT received debug3: send packet: type 50 debug3: receive packet: type 51 debug1: Authentications that can continue: publickey debug3: start over, passed a different list publickey debug3: preferred publickey,keyboard-interactive,password debug3: authmethod_lookup publickey debug3: remaining preferred: keyboard-interactive,password debug3: authmethod_is_enabled publickey debug1: Next authentication method: publickey debug1: Offering public key: RSA SHA256:iIOTgB1gfdbEi11gdn426XlamlH53riKdLqImE22zi8 /Users/melo/.ssh/id_rsa debug3: send_pubkey_test debug3: send packet: type 50 debug2: we sent a publickey packet, wait for reply debug3: receive packet: type 51 debug1: Authentications that can continue: publickey debug1: Trying private key: /Users/melo/.ssh/id_dsa debug3: no such identity: /Users/melo/.ssh/id_dsa: No such file or directory debug1: Trying private key: /Users/melo/.ssh/id_ecdsa debug3: no such identity: /Users/melo/.ssh/id_ecdsa: No such file or directory debug1: Trying private key: /Users/melo/.ssh/id_ed25519 debug3: no such identity: /Users/melo/.ssh/id_ed25519: No such file or directory debug2: we did not send a packet, disable method debug1: No more authentication methods to try. melo@159.65.75.41: Permission denied (publickey). Error message is totally unhelpful. Googling turns up some problems with file permissions and with public key access being disabled in SSH config file. Logged in via DO, opened a console on the machine (Droplets > More > Access console), and found that the ssh folder was owned by root. Nobody can log in via ssh. Charles updated the permissions: sudo chown -R melo:melo ~/.ssh sudo chmod 700 ~/.ssh sudo chmod 600 ~/.ssh/* This still didn't work. Finally, uninstalling/reinstalling openssh did the trick: sudo apt-get purge openssh-client openssh-server sudo apt-get install openssh-client openssh-server then remove the .ssh folder in the root user's home directory. Regenerate the keys as the root user: ssh-keygen Now the machine should be ready to run the reinstalled SSH server. To enable passwordless access, assuming you are connecting from a local machine (Mac) to a remote machine (wisko): On the Mac: generate your ssh key: ssh-keygen print your public key to the screen: cat ~/.ssh/id_rsa.pub Copy this key to the clipboard. On the Mac, log in to wisko: ssh melo@<wisko-ip> Once you are logged in, edit the following file with your favorite text editor (e.g., nano): nano ~/.ssh/authorized_keys Add the public key from your Mac as the last line of the file. Save it and close it. Now test out your passwordless access: SSH from the Mac to wisko. The changes should take effect immediately. Link to Uncle Chucky's Passwordless SSH Login Guide","title":"ssh debug mode w/ charles"},{"location":"smallmelo-migration-1/","text":"smallmelo.com migration part 1 copy public ssh key to wisko get public ssh key from local machine cat ~/.ssh/id_rsa.pub copy that log into wisko in seperate termibal window nano .ssh/authorized_keys paste in then exit changing the folder structure of my wordpress site used this site to setup the folders the way i wanted them. lots of nano-ing and reviewing later, ready to start making changes. cd /var/www make directory sudo mkdir -p /var/www/allthehatsformaps.com/public_html grant myself permission to access sudo chown -R $USER:$USER /var/www/allthehatsformaps.com/public_html create example page nano /var/www/allthehatsformaps.com/public_html/index.html ugh, do some renaming sudo mv allthehatsformaps.com allthehatsformaps sudo chown -R $USER:$USER /var/www/allthehatsformaps/public_html add my html content accordingly, then make a copy of the conf file sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/allthehatsformaps.conf nano allthehatsformaps.conf grant permissions sudo chown -R $USER:$USER /etc/apache2/sites-available/allthehatsformaps.conf edited my new config file ServerName allthehatsformaps.com ServerAlias www.allthehatsformaps.com ServerAdmin melo@allthehatsformaps.com DocumentRoot /var/www/allthehatsformaps/public_html disable charles' site & enable my new one sudo a2dissite 000-default.conf sudo a2ensite allthehatsformaps.conf service apache2 reload copy wordpress folder from htdocs to my new folder sudo mv /var/www/htdocs/wordpress /var/www/allthehatsformaps/public_html oops... that moved the entire folder, i just wanted to move its contents. cd /var/www/allthehatsformaps/public_html sudo mv wordpress/* . rmdir wordpress rm index.html going to allthehatsformaps.com works going to allthehatsformaps.com/wp-admin tries to redirect to http://159.65.75.41/wordpress/wp-login.php?redirect_to=http%3A%2F%2Fallthehatsformaps.com%2Fwp-admin%2F&reauth=1 and throws a 404 error went instead to: http://159.65.75.41/wp-login.php copy back the wordpress folder into htdocs sudo cp /var/www/allthehatsformaps/public_html/* /var/www/htdocs/wordpress disable my site config and enable old one sudo a2dissite allthehatsformaps.conf sudo a2ensite 000-default.conf service apache2 reload went to the wordpress login and signed in under settings removed \"wordpress\" subfolder from the site url disable charles' site & enable my new one sudo a2dissite 000-default.conf sudo a2ensite allthehatsformaps.conf service apache2 reload logged back into wordpress and changed the url to: http://allthehatsformaps.com removed the old wordpress folder in htdocs: sudo rm -r wordpress cd back into the new wordpress and added a .htaccess file with the following: <IfModule mod_rewrite.c> RewriteEngine On RewriteBase / RewriteRule ^index\\.php$ - [L] RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule . /index.php [L] </IfModule> then gave wordpress permission to edit it, according to this site","title":"smallmelo.com Migration: Part 1"},{"location":"smallmelo-migration-1/#smallmelocom-migration-part-1","text":"","title":"smallmelo.com migration part 1"},{"location":"smallmelo-migration-1/#copy-public-ssh-key-to-wisko","text":"get public ssh key from local machine cat ~/.ssh/id_rsa.pub copy that log into wisko in seperate termibal window nano .ssh/authorized_keys paste in then exit","title":"copy public ssh key to wisko"},{"location":"smallmelo-migration-1/#changing-the-folder-structure-of-my-wordpress-site","text":"used this site to setup the folders the way i wanted them. lots of nano-ing and reviewing later, ready to start making changes. cd /var/www make directory sudo mkdir -p /var/www/allthehatsformaps.com/public_html grant myself permission to access sudo chown -R $USER:$USER /var/www/allthehatsformaps.com/public_html create example page nano /var/www/allthehatsformaps.com/public_html/index.html ugh, do some renaming sudo mv allthehatsformaps.com allthehatsformaps sudo chown -R $USER:$USER /var/www/allthehatsformaps/public_html add my html content accordingly, then make a copy of the conf file sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/allthehatsformaps.conf nano allthehatsformaps.conf grant permissions sudo chown -R $USER:$USER /etc/apache2/sites-available/allthehatsformaps.conf edited my new config file ServerName allthehatsformaps.com ServerAlias www.allthehatsformaps.com ServerAdmin melo@allthehatsformaps.com DocumentRoot /var/www/allthehatsformaps/public_html disable charles' site & enable my new one sudo a2dissite 000-default.conf sudo a2ensite allthehatsformaps.conf service apache2 reload copy wordpress folder from htdocs to my new folder sudo mv /var/www/htdocs/wordpress /var/www/allthehatsformaps/public_html oops... that moved the entire folder, i just wanted to move its contents. cd /var/www/allthehatsformaps/public_html sudo mv wordpress/* . rmdir wordpress rm index.html going to allthehatsformaps.com works going to allthehatsformaps.com/wp-admin tries to redirect to http://159.65.75.41/wordpress/wp-login.php?redirect_to=http%3A%2F%2Fallthehatsformaps.com%2Fwp-admin%2F&reauth=1 and throws a 404 error went instead to: http://159.65.75.41/wp-login.php copy back the wordpress folder into htdocs sudo cp /var/www/allthehatsformaps/public_html/* /var/www/htdocs/wordpress disable my site config and enable old one sudo a2dissite allthehatsformaps.conf sudo a2ensite 000-default.conf service apache2 reload went to the wordpress login and signed in under settings removed \"wordpress\" subfolder from the site url disable charles' site & enable my new one sudo a2dissite 000-default.conf sudo a2ensite allthehatsformaps.conf service apache2 reload logged back into wordpress and changed the url to: http://allthehatsformaps.com removed the old wordpress folder in htdocs: sudo rm -r wordpress cd back into the new wordpress and added a .htaccess file with the following: <IfModule mod_rewrite.c> RewriteEngine On RewriteBase / RewriteRule ^index\\.php$ - [L] RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule . /index.php [L] </IfModule> then gave wordpress permission to edit it, according to this site","title":"changing the folder structure of my wordpress site"},{"location":"smallmelo-migration-2/","text":"smallmelo.com migration part 2 (all the things) grant melo permission to create files and upload via sftp using filezilla used these instructions copied html/php files into var/www/smallmelo using filazilla add the dns records to dreamhost to point to the server 159.65.75.41 (a) www smallmelo.com (cname) create new conf file for smallmelo sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/smallmelo.conf edit the conf file to point to smallmelo.com enable the site sudo a2ensite smallmelo.conf service apache2 reload make a backup copy all files from smallmelo.com made a basic index.html file turn off hosting by dreamhost restart apache2 sudo service apache2 restart","title":"smallmelo.com Migration: Part 2"},{"location":"smallmelo-migration-2/#smallmelocom-migration-part-2-all-the-things","text":"","title":"smallmelo.com migration part 2 (all the things)"},{"location":"smallmelo-migration-2/#grant-melo-permission-to-create-files-and-upload-via-sftp-using-filezilla","text":"used these instructions","title":"grant melo permission to create files and upload via sftp using filezilla"},{"location":"smallmelo-migration-2/#copied-htmlphp-files-into-varwwwsmallmelo","text":"using filazilla","title":"copied html/php files into var/www/smallmelo"},{"location":"smallmelo-migration-2/#add-the-dns-records-to-dreamhost-to-point-to-the-server","text":"159.65.75.41 (a) www smallmelo.com (cname)","title":"add the dns records to dreamhost to point to the server"},{"location":"smallmelo-migration-2/#create-new-conf-file-for-smallmelo","text":"sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/smallmelo.conf","title":"create new conf file for smallmelo"},{"location":"smallmelo-migration-2/#edit-the-conf-file-to-point-to-smallmelocom","text":"","title":"edit the conf file to point to smallmelo.com"},{"location":"smallmelo-migration-2/#enable-the-site","text":"sudo a2ensite smallmelo.conf service apache2 reload","title":"enable the site"},{"location":"smallmelo-migration-2/#make-a-backup-copy-all-files-from-smallmelocom","text":"","title":"make a backup copy all files from smallmelo.com"},{"location":"smallmelo-migration-2/#made-a-basic-indexhtml-file","text":"","title":"made a basic index.html file"},{"location":"smallmelo-migration-2/#turn-off-hosting-by-dreamhost","text":"","title":"turn off hosting by dreamhost"},{"location":"smallmelo-migration-2/#restart-apache2","text":"sudo service apache2 restart","title":"restart apache2"},{"location":"smallmelo-migration-3/","text":"smallmelo.com migration part 3 (allthehatsformaps to smallmelo) remove placeholder file sudo rm index.html copy the files to smallmelo sudo cp -a /var/www/allthehatsformaps/public_html/* /var/www/smallmelo/public_html update the site in wordpress logged back into wordpress and changed the url to: http://smallmelo.com copy the relevent stuff over to the smallmelo.conf <Directory /var/www/smallmelo/public_html/> DirectoryIndex index.php AllowOverride All Order allow,deny Allow from all </Directory> disable and enable sites sudo a2dissite allthehatsformaps.conf sudo a2ensite smallmelo.conf sudo /etc/init.d/apache2 restart give permissions sudo chown -v :www-data /var/www/smallmelo/public_html/.htaccess sudo chmod -v 664 \"/var/www/smallmelo/public_html/.htaccess\" reboot sudo /etc/init.d/apache2 restart disabled, reenabled, reload sudo a2dissite smallmelo.conf sudo a2ensite smallmelo.conf sudo /etc/init.d/apache2 restart service apache2 reload disabling allthehats sudo rm allthehatsformaps.conf service apache2 reload in the /var/wwww sudo rm -r allthehatsformaps in dreamhost remove wisko DNS records setup redirect","title":"smallmelo.com Migration: Part 3"},{"location":"smallmelo-migration-3/#smallmelocom-migration-part-3-allthehatsformaps-to-smallmelo","text":"","title":"smallmelo.com migration part 3 (allthehatsformaps to smallmelo)"},{"location":"smallmelo-migration-3/#remove-placeholder-file","text":"sudo rm index.html","title":"remove placeholder file"},{"location":"smallmelo-migration-3/#copy-the-files-to-smallmelo","text":"sudo cp -a /var/www/allthehatsformaps/public_html/* /var/www/smallmelo/public_html","title":"copy the files to smallmelo"},{"location":"smallmelo-migration-3/#update-the-site-in-wordpress","text":"logged back into wordpress and changed the url to: http://smallmelo.com","title":"update the site in wordpress"},{"location":"smallmelo-migration-3/#copy-the-relevent-stuff-over-to-the-smallmeloconf","text":"<Directory /var/www/smallmelo/public_html/> DirectoryIndex index.php AllowOverride All Order allow,deny Allow from all </Directory>","title":"copy the relevent stuff over to the smallmelo.conf"},{"location":"smallmelo-migration-3/#disable-and-enable-sites","text":"sudo a2dissite allthehatsformaps.conf sudo a2ensite smallmelo.conf sudo /etc/init.d/apache2 restart","title":"disable and enable sites"},{"location":"smallmelo-migration-3/#give-permissions","text":"sudo chown -v :www-data /var/www/smallmelo/public_html/.htaccess sudo chmod -v 664 \"/var/www/smallmelo/public_html/.htaccess\"","title":"give permissions"},{"location":"smallmelo-migration-3/#reboot","text":"sudo /etc/init.d/apache2 restart","title":"reboot"},{"location":"smallmelo-migration-3/#disabled-reenabled-reload","text":"sudo a2dissite smallmelo.conf sudo a2ensite smallmelo.conf sudo /etc/init.d/apache2 restart service apache2 reload","title":"disabled, reenabled, reload"},{"location":"smallmelo-migration-3/#disabling-allthehats","text":"sudo rm allthehatsformaps.conf service apache2 reload","title":"disabling allthehats"},{"location":"smallmelo-migration-3/#in-the-varwwww","text":"sudo rm -r allthehatsformaps","title":"in the /var/wwww"},{"location":"smallmelo-migration-3/#in-dreamhost","text":"remove wisko DNS records setup redirect","title":"in dreamhost"},{"location":"wisko-gitea/","text":"wisko gitea before you begin: gitea setup info (see wisko setup for details on how gitea was set up). where is gitea The wisko gitea instance is installed to $GOPATH/src/code.gitea.io/gitea and there is a symlink to this directory at ~/gitea . This directory is actually a cloned git repo, so you can see what files you've modified from the default by running a git status . The binary is in that folder, at bin/gitea . where is go Go is installed using goenv , so the global version of go that goenv will set can be printed using: goenv global You can verify you have the goenv go installed by running: which go which should return ~/.goenv/shims/go , and go version which should return 1.7.5. task summary Making gitea available via the subdomain git.smallmelo.com requires setting up a couple of components: * subdomain * web server to handle redirects * gitea configuration to tell gitea where it is hosted * https certificates valid for the subdomain set up git subdomain First thing is, we need to set up the subdomain git.smallmelo.com to redirect to the server. This depends on the hosting provider, but should be an A Name Record: A Record : Record: git Value: apache web server settings Setting up a name record for the subdomain will result in requests for \"git.smallmelo.com\" and \"smallmelo.com\" to both go to your server. The server will be able to see what domain/subdomain was requested in each request, so we need to set up rules to handle the subdomain correctly. If the git subdomain is not set up with the DNS provider yet, you can still test it locally. From whatever machine you're connecting to wisk as, add an entry to /etc/hosts that will map the subdomain to wisko's IP: vim /etc/hosts and add 159.65.75.41 git.smallmelo.com (Do this on your machine, not on wisko.) apache configuration: http Now we'll set up the Apache web server to redirect any http requests to git.smallmelo.com on port 80 on to gitea at port 3000. Create a new apache config for this site at /etc/apache2/sites-available/git-smallmelo.conf that will contain all our settings. Set up a listener on port 80, all interfaces, that looks for requests to git.smallmelo.com : /etc/apache2/sites-available/git-smallmelo.conf : <VirtualHost *:80> ServerName git.smallmelo.com ServerAdmin melo@smallmelo.com # ------------------------- # Need to enable the following mods: # a2enmod proxy # a2enmod proxy_http # Preserve original request (git.smallmelo.com) ProxyPreserveHost On # Set up proxy <Proxy *> Order allow,deny Allow from all </Proxy> ProxyPass / http://localhost:3000/ ProxyPassReverse / http://localhost:3000/ # ------------------------- ErrorLog ${APACHE_LOG_DIR}/git-smallmelo-error.log CustomLog ${APACHE_LOG_DIR}/git-smallmelo-access.log combined # Note that we don't set a document root # or permissions for a web directory # because we're just forwarding traffic # to gitea, which runs an entirely separate # web server. </VirtualHost> apache configuration: https We also need to set up Apache to redirect https requests to git.smallmelo.com on port 443 to gitea at port 3000. This will require an HTTPS certificate for git.smallmelo.com , so fire up lets encrypt. making apache certificate Create an https apache config for this site at /etc/apache2/sites-available/git-smallmelo-le-ssl.conf that will contain all our settings. Set up a listener on port 443, all interfaces, that looks for requests to git.smallmelo.com . Run the certbot: $ sudo certbot certonly --non-interactive --agree-tos --email \"melo@smallmelo.com\" --apache -d \"git.smallmelo.com\" This will take a minute, but should conclude with: IMPORTANT NOTES: - Congratulations! Your certificate and chain have been saved at: /etc/letsencrypt/live/git.smallmelo.com/fullchain.pem Your key file has been saved at: /etc/letsencrypt/live/git.smallmelo.com/privkey.pem Your cert will expire on 2018-06-24. To obtain a new or tweaked version of this certificate in the future, simply run certbot again. To non-interactively renew *all* of your certificates, run \"certbot renew\" - If you like Certbot, please consider supporting our work by: Donating to ISRG / Let's Encrypt: https://letsencrypt.org/donate Donating to EFF: https://eff.org/donate-le apache configuration: https (revisited) Note that once the HTTPS request hits the server, the proxy does not need to happen over HTTPS since it happens within a single machine. /etc/apache2/sites-available/git-smallmelo-le-ssl.conf : <IfModule mod_ssl.c> <VirtualHost *:443> ServerName git.smallmelo.com ServerAdmin melo@smallmelo.com ErrorLog ${APACHE_LOG_DIR}/git-smallmelo-ssl-error.log CustomLog ${APACHE_LOG_DIR}/git-smallmelo-ssl-access.log combined # ------------------------- # Need to enable the following mods: # a2enmod proxy # a2enmod proxy_http SSLEngine on SSLProxyEngine On Include /etc/letsencrypt/options-ssl-apache.conf SSLCertificateFile /etc/letsencrypt/live/git.smallmelo.com/fullchain.pem SSLCertificateKeyFile /etc/letsencrypt/live/git.smallmelo.com/privkey.pem # Preserve original request (git.smallmelo.com) ProxyPreserveHost On # Set up proxy <Proxy *> Order allow,deny Allow from all </Proxy> ProxyPass / http://localhost:3000/ ProxyPassReverse / http://localhost:3000/ # ------------------------- </VirtualHost> </IfModule> enable and activate Now enable the mods: a2enmod proxy a2enmod proxy_http Now enable the site: a2ensite git-smallmelo a2ensite git-smallmelo-le-ssl Now activate the site: service apache2 reload Once the A Name DNS record propagates, you can test out the Apache configuration. Run a dummy HTTP web server on port 3000: cat \"<h2>hello world</h2>\" > index.html python3 -m http.server 3000 Now if you visit the subdomain: http://git.smallmelo.com you should see a hit in the window running the HTTP server on port 3000. gitea configuration gitea version Start out by checking which version of gitea you have. We have checked out release 1.2 , which means that our git repo is in a \"headless\" state. Any changes that we make are going to go into a dead end. But that's perfect - we can keep track of all our changes relative to version 1.2, and revert any changes we don't want anymore. Make the following changes to the default app.ini gitea config file: RUN_USER = melo DOMAIN = git.smallmelo.com ROOT_URL = %(PROTOCOL)s://%(DOMAIN)s/ (Note, you can use git diff to pick up the changes in the file.) Kill any instances of gitea that are already running on port 3000, and start up the gitea server: cd ~/gitea ./gitea web (or, do it in a screen, as mentioned in the wisko setup doc ). https certs See the above modifications to the document about certificates. A new SSL certificate for the git subdomain ( git.smallmelo.com ) was needed, so we used certbot to make it. To explain the HTTPS certificate setup for git.smallmelo.com a bit more: Gitea runs its own web server, hosts its own files, and does not require an Apache server to run. We're just using Apache for convenience. Just as HTTP requests to smallmelo.com always go to port 80, where there is an Apache server listening, HTTPS requests to smallmelo.com always go to port 443, where there is also an Apache server listening HTTPS requests are handled by the Apache web server, so the certificates to create an encrypted session are handled by the Apache web server Apache must have an SSL certifiate for git.smallmelo.com to make the connection, or the browser will complain that the server is not configured correctly When we make a request for a gitea resource (say, https://git.smallmelo.com/melo/my-cool-project ), the subdomain tells Apache where to forward the request (to gitea on port 3000), and the rest of the url ( /melo/my-cool-project ) is passed on to gitea, unmodified The request from Apache to gitea happens on a single machine, so the connection does not need to be encrypted, hence Apache's proxy requests go to http://localhost:3000 and not https://localhost:3000","title":"Wisko Gitea"},{"location":"wisko-gitea/#wisko-gitea","text":"","title":"wisko gitea"},{"location":"wisko-gitea/#before-you-begin-gitea-setup-info","text":"(see wisko setup for details on how gitea was set up).","title":"before you begin: gitea setup info"},{"location":"wisko-gitea/#where-is-gitea","text":"The wisko gitea instance is installed to $GOPATH/src/code.gitea.io/gitea and there is a symlink to this directory at ~/gitea . This directory is actually a cloned git repo, so you can see what files you've modified from the default by running a git status . The binary is in that folder, at bin/gitea .","title":"where is gitea"},{"location":"wisko-gitea/#where-is-go","text":"Go is installed using goenv , so the global version of go that goenv will set can be printed using: goenv global You can verify you have the goenv go installed by running: which go which should return ~/.goenv/shims/go , and go version which should return 1.7.5.","title":"where is go"},{"location":"wisko-gitea/#task-summary","text":"Making gitea available via the subdomain git.smallmelo.com requires setting up a couple of components: * subdomain * web server to handle redirects * gitea configuration to tell gitea where it is hosted * https certificates valid for the subdomain","title":"task summary"},{"location":"wisko-gitea/#set-up-git-subdomain","text":"First thing is, we need to set up the subdomain git.smallmelo.com to redirect to the server. This depends on the hosting provider, but should be an A Name Record: A Record : Record: git Value:","title":"set up git subdomain"},{"location":"wisko-gitea/#apache-web-server-settings","text":"Setting up a name record for the subdomain will result in requests for \"git.smallmelo.com\" and \"smallmelo.com\" to both go to your server. The server will be able to see what domain/subdomain was requested in each request, so we need to set up rules to handle the subdomain correctly. If the git subdomain is not set up with the DNS provider yet, you can still test it locally. From whatever machine you're connecting to wisk as, add an entry to /etc/hosts that will map the subdomain to wisko's IP: vim /etc/hosts and add 159.65.75.41 git.smallmelo.com (Do this on your machine, not on wisko.)","title":"apache web server settings"},{"location":"wisko-gitea/#apache-configuration-http","text":"Now we'll set up the Apache web server to redirect any http requests to git.smallmelo.com on port 80 on to gitea at port 3000. Create a new apache config for this site at /etc/apache2/sites-available/git-smallmelo.conf that will contain all our settings. Set up a listener on port 80, all interfaces, that looks for requests to git.smallmelo.com : /etc/apache2/sites-available/git-smallmelo.conf : <VirtualHost *:80> ServerName git.smallmelo.com ServerAdmin melo@smallmelo.com # ------------------------- # Need to enable the following mods: # a2enmod proxy # a2enmod proxy_http # Preserve original request (git.smallmelo.com) ProxyPreserveHost On # Set up proxy <Proxy *> Order allow,deny Allow from all </Proxy> ProxyPass / http://localhost:3000/ ProxyPassReverse / http://localhost:3000/ # ------------------------- ErrorLog ${APACHE_LOG_DIR}/git-smallmelo-error.log CustomLog ${APACHE_LOG_DIR}/git-smallmelo-access.log combined # Note that we don't set a document root # or permissions for a web directory # because we're just forwarding traffic # to gitea, which runs an entirely separate # web server. </VirtualHost>","title":"apache configuration: http"},{"location":"wisko-gitea/#apache-configuration-https","text":"We also need to set up Apache to redirect https requests to git.smallmelo.com on port 443 to gitea at port 3000. This will require an HTTPS certificate for git.smallmelo.com , so fire up lets encrypt.","title":"apache configuration: https"},{"location":"wisko-gitea/#making-apache-certificate","text":"Create an https apache config for this site at /etc/apache2/sites-available/git-smallmelo-le-ssl.conf that will contain all our settings. Set up a listener on port 443, all interfaces, that looks for requests to git.smallmelo.com . Run the certbot: $ sudo certbot certonly --non-interactive --agree-tos --email \"melo@smallmelo.com\" --apache -d \"git.smallmelo.com\" This will take a minute, but should conclude with: IMPORTANT NOTES: - Congratulations! Your certificate and chain have been saved at: /etc/letsencrypt/live/git.smallmelo.com/fullchain.pem Your key file has been saved at: /etc/letsencrypt/live/git.smallmelo.com/privkey.pem Your cert will expire on 2018-06-24. To obtain a new or tweaked version of this certificate in the future, simply run certbot again. To non-interactively renew *all* of your certificates, run \"certbot renew\" - If you like Certbot, please consider supporting our work by: Donating to ISRG / Let's Encrypt: https://letsencrypt.org/donate Donating to EFF: https://eff.org/donate-le","title":"making apache certificate"},{"location":"wisko-gitea/#apache-configuration-https-revisited","text":"Note that once the HTTPS request hits the server, the proxy does not need to happen over HTTPS since it happens within a single machine. /etc/apache2/sites-available/git-smallmelo-le-ssl.conf : <IfModule mod_ssl.c> <VirtualHost *:443> ServerName git.smallmelo.com ServerAdmin melo@smallmelo.com ErrorLog ${APACHE_LOG_DIR}/git-smallmelo-ssl-error.log CustomLog ${APACHE_LOG_DIR}/git-smallmelo-ssl-access.log combined # ------------------------- # Need to enable the following mods: # a2enmod proxy # a2enmod proxy_http SSLEngine on SSLProxyEngine On Include /etc/letsencrypt/options-ssl-apache.conf SSLCertificateFile /etc/letsencrypt/live/git.smallmelo.com/fullchain.pem SSLCertificateKeyFile /etc/letsencrypt/live/git.smallmelo.com/privkey.pem # Preserve original request (git.smallmelo.com) ProxyPreserveHost On # Set up proxy <Proxy *> Order allow,deny Allow from all </Proxy> ProxyPass / http://localhost:3000/ ProxyPassReverse / http://localhost:3000/ # ------------------------- </VirtualHost> </IfModule>","title":"apache configuration: https (revisited)"},{"location":"wisko-gitea/#enable-and-activate","text":"Now enable the mods: a2enmod proxy a2enmod proxy_http Now enable the site: a2ensite git-smallmelo a2ensite git-smallmelo-le-ssl Now activate the site: service apache2 reload Once the A Name DNS record propagates, you can test out the Apache configuration. Run a dummy HTTP web server on port 3000: cat \"<h2>hello world</h2>\" > index.html python3 -m http.server 3000 Now if you visit the subdomain: http://git.smallmelo.com you should see a hit in the window running the HTTP server on port 3000.","title":"enable and activate"},{"location":"wisko-gitea/#gitea-configuration","text":"","title":"gitea configuration"},{"location":"wisko-gitea/#gitea-version","text":"Start out by checking which version of gitea you have. We have checked out release 1.2 , which means that our git repo is in a \"headless\" state. Any changes that we make are going to go into a dead end. But that's perfect - we can keep track of all our changes relative to version 1.2, and revert any changes we don't want anymore. Make the following changes to the default app.ini gitea config file: RUN_USER = melo DOMAIN = git.smallmelo.com ROOT_URL = %(PROTOCOL)s://%(DOMAIN)s/ (Note, you can use git diff to pick up the changes in the file.) Kill any instances of gitea that are already running on port 3000, and start up the gitea server: cd ~/gitea ./gitea web (or, do it in a screen, as mentioned in the wisko setup doc ).","title":"gitea version"},{"location":"wisko-gitea/#https-certs","text":"See the above modifications to the document about certificates. A new SSL certificate for the git subdomain ( git.smallmelo.com ) was needed, so we used certbot to make it. To explain the HTTPS certificate setup for git.smallmelo.com a bit more: Gitea runs its own web server, hosts its own files, and does not require an Apache server to run. We're just using Apache for convenience. Just as HTTP requests to smallmelo.com always go to port 80, where there is an Apache server listening, HTTPS requests to smallmelo.com always go to port 443, where there is also an Apache server listening HTTPS requests are handled by the Apache web server, so the certificates to create an encrypted session are handled by the Apache web server Apache must have an SSL certifiate for git.smallmelo.com to make the connection, or the browser will complain that the server is not configured correctly When we make a request for a gitea resource (say, https://git.smallmelo.com/melo/my-cool-project ), the subdomain tells Apache where to forward the request (to gitea on port 3000), and the rest of the url ( /melo/my-cool-project ) is passed on to gitea, unmodified The request from Apache to gitea happens on a single machine, so the connection does not need to be encrypted, hence Apache's proxy requests go to http://localhost:3000 and not https://localhost:3000","title":"https certs"}]}