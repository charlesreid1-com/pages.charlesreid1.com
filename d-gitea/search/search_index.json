{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"d-gitea \u00b6 Docker files for running gitea documentation: d-gitea container (you are here) source code on git.charlesreid1.com: d-gitea source code on github.com: charlesreid1-docker/d-gitea gitea documentation - running gitea with docker Table of Contents \u00b6 secrets container directory structure files mounted into container using the docker-compose.yml file configuring gitea with app.ini customizing gitea with custom files backing up and restoring gitea Secrets \u00b6 There are two secrets to set in the app.ini before running gitea: the internal token and the secret key. These can be set in *.secret files: internal_token.secret secret_key.secret The contents should be the value of the variable you wish to use in custom/conf/app.ini . These files are not tracked by git. Container Directory Structure \u00b6 The custom/ dir in this folder maps to the /data/gitea volume inside the gitea container. For example, the app.ini configuration file will be mapped into the container at /data/gitea/conf/app.ini . Container Data Volume \u00b6 This container expects to use a docker data volume to store the gitea custom configuration and the entire contents of all repositories. On the host machine, you can access named data volumes at /var/lib/docker/volumes/gitea_gitea/_data or copy files in and out of the container using docker cp . directory structure before adding repos to gitea \u00b6 Directory structure for host-mounted gitea directory before any repositorieshave been added to gitea: gitea \u251c\u2500\u2500 git \u2502 \u2514\u2500\u2500 repositories \u251c\u2500\u2500 gitea \u2502 \u251c\u2500\u2500 conf \u2502 \u2502 \u2514\u2500\u2500 app.ini \u2502 \u251c\u2500\u2500 gitea.db \u2502 \u251c\u2500\u2500 indexers \u2502 \u2502 \u2514\u2500\u2500 issues.bleve \u2502 \u2502 \u251c\u2500\u2500 index_meta.json \u2502 \u2502 \u2514\u2500\u2500 store \u2502 \u251c\u2500\u2500 lfs \u2502 \u251c\u2500\u2500 log \u2502 \u2502 \u251c\u2500\u2500 gitea.log \u2502 \u2502 \u251c\u2500\u2500 http.log \u2502 \u2502 \u2514\u2500\u2500 xorm.log \u2502 \u2514\u2500\u2500 sessions \u2502 \u2514\u2500\u2500 oauth2 \u2514\u2500\u2500 ssh [error opening dir] 11 directories, 7 files directory structure after adding repos to gitea \u00b6 After adding a repository: gitea \u251c\u2500\u2500 git \u2502 \u2514\u2500\u2500 repositories \u2502 \u2514\u2500e charlesreid1 \u2502 \u2514\u2500\u2500 oieruoweiur.git \u2502 \u251c\u2500\u2500 branches \u2502 \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 description \u2502 \u251c\u2500\u2500 HEAD \u2502 \u251c\u2500\u2500 hooks \u2502 \u2502 \u251c\u2500\u2500 applypatch-msg.sample \u2502 \u2502 \u251c\u2500\u2500 commit-msg.sample \u2502 \u2502 \u251c\u2500\u2500 post-receive \u2502 \u2502 \u251c\u2500\u2500 post-receive.d \u2502 \u2502 \u2502 \u2514\u2500\u2500 gitea \u2502 \u2502 \u251c\u2500\u2500 post-update.sample \u2502 \u2502 \u251c\u2500\u2500 pre-applypatch.sample \u2502 \u2502 \u251c\u2500\u2500 pre-commit.sample \u2502 \u2502 \u251c\u2500\u2500 prepare-commit-msg.sample \u2502 \u2502 \u251c\u2500\u2500 pre-push.sample \u2502 \u2502 \u251c\u2500\u2500 pre-rebase.sample \u2502 \u2502 \u251c\u2500\u2500 pre-receive \u2502 \u2502 \u251c\u2500\u2500 pre-receive.d \u2502 \u2502 \u2502 \u2514\u2500\u2500 gitea \u2502 \u2502 \u251c\u2500\u2500 pre-receive.sample \u2502 \u2502 \u251c\u2500\u2500 update \u2502 \u2502 \u251c\u2500\u2500 update.d \u2502 \u2502 \u2502 \u2514\u2500\u2500 gitea \u2502 \u2502 \u2514\u2500\u2500 update.sample \u2502 \u251c\u2500\u2500 info \u2502 \u2502 \u251c\u2500\u2500 exclude \u2502 \u2502 \u2514\u2500\u2500 refs \u2502 \u251c\u2500\u2500 objects \u2502 \u2502 \u251c\u2500\u2500 info \u2502 \u2502 \u2502 \u2514\u2500\u2500 packs \u2502 \u2502 \u2514\u2500\u2500 pack \u2502 \u2514\u2500\u2500 refs \u2502 \u251c\u2500\u2500 heads \u2502 \u2514\u2500\u2500 tags \u251c\u2500\u2500 gitea \u2502 \u251c\u2500\u2500 conf \u2502 \u2502 \u2514\u2500\u2500 app.ini \u2502 \u251c\u2500\u2500 gitea.db \u2502 \u251c\u2500\u2500 indexers \u2502 \u2502 \u2514\u2500\u2500 issues.bleve \u2502 \u2502 \u251c\u2500\u2500 index_meta.json \u2502 \u2502 \u2514\u2500\u2500 store \u2502 \u251c\u2500\u2500 lfs \u2502 \u251c\u2500\u2500 log \u2502 \u2502 \u251c\u2500\u2500 gitea.log \u2502 \u2502 \u251c\u2500\u2500 http.log \u2502 \u2502 \u2514\u2500\u2500 xorm.log \u2502 \u2514\u2500\u2500 sessions \u2502 \u2514\u2500\u2500 oauth2 \u2514\u2500\u2500 ssh [error opening dir] 25 directories, 29 files Files Mounted Into Container \u00b6 custom/conf configuration file \u00b6 The conf dir contains configuration files to configure how gitea works. The app.ini file needs to contain two secrets, which are scrubbed in app.ini.sample . The two secrets that are needed are: an \"internal token\" secret, contained in internal_token.secret a \"secret key\" secret, contained in secret_key.secret Use the make_app_ini.sh script to add the two secrets to the document. This will use sed to find/replace instances of the scrubbed secret, and will output the result to custom/conf/app.ini . ./make_app_ini.sh This generates custom/conf/app.ini . When the container is run, this file will be at /data/gitea/conf/app.ini . custom/templates template files \u00b6 The templates directory contains template files. These are gitea templates that control how particular kinds of gitea pages look. For example, a template can be used to modify how the user page looks, or modify the layout of repository main pages. In the container, this will be at /data/gitea/templates/ . custom/pages gitea pages \u00b6 The pages directory contains one-off pages or static content that is hosted by gitea at the same domain (git.charlesreid1.com) but not necessarily incorporated into the gitea site. For example, a custom \"about me\" page could be added as a static .html file, and it would be hosted at git.charlesreid1.com/about . In the container, this will be at /data/gitea/pages/ . Using the docker-compose.yml File \u00b6 This directory contains a docker-compose file that can be used to run a gitea server on port 3000. To get the gitea container up and running, $ docker-compose up Now visit <server-ip>:3000 . You will be presented with a configuration page. Set up the gitea instance. This will automatically populate the directory structure. See below for more info. Use this as a project seed to add gitea containers to other docker pods. Notes on Custom Files \u00b6 The settings in the app.ini file are documented here . An extensive sample app.ini file is here (WARNING: this broke gitea). The existing gitea templates are in the gitea repo under templates/ . These can be modified as needed and placed in the custom/templates/ directory. Backing Up and Restoring Gitea \u00b6 Fortunately, gitea provides dump functionality. Unfortunately, there is no restore functionality. See pod-charlesreid1/utils-gitea for proper backup/restore scripts. Executive Summary \u00b6 Backup: create a backup target directory in the container create a gitea dump zip file using gitea dump command create a gitea avatars zip file copy everything in the backup target directory out of the container remove the backup target directory Restore: create a restore target directory in the container copy gitea dump and gitea avatars zip files into restore target dir unpack dump zip, unpack avatars zip unzip repositories zip (contained in dump zip) restore repositories/ folder to /data/git/repositories/ (skip restoring custom/ files, version control takes care of that) restore sqlite database using sql database dump restore avatars remove the restore target directory","title":"Home"},{"location":"#d-gitea","text":"Docker files for running gitea documentation: d-gitea container (you are here) source code on git.charlesreid1.com: d-gitea source code on github.com: charlesreid1-docker/d-gitea gitea documentation - running gitea with docker","title":"d-gitea"},{"location":"#table-of-contents","text":"secrets container directory structure files mounted into container using the docker-compose.yml file configuring gitea with app.ini customizing gitea with custom files backing up and restoring gitea","title":"Table of Contents"},{"location":"#secrets","text":"There are two secrets to set in the app.ini before running gitea: the internal token and the secret key. These can be set in *.secret files: internal_token.secret secret_key.secret The contents should be the value of the variable you wish to use in custom/conf/app.ini . These files are not tracked by git.","title":"Secrets"},{"location":"#container-directory-structure","text":"The custom/ dir in this folder maps to the /data/gitea volume inside the gitea container. For example, the app.ini configuration file will be mapped into the container at /data/gitea/conf/app.ini .","title":"Container Directory Structure"},{"location":"#container-data-volume","text":"This container expects to use a docker data volume to store the gitea custom configuration and the entire contents of all repositories. On the host machine, you can access named data volumes at /var/lib/docker/volumes/gitea_gitea/_data or copy files in and out of the container using docker cp .","title":"Container Data Volume"},{"location":"#directory-structure-before-adding-repos-to-gitea","text":"Directory structure for host-mounted gitea directory before any repositorieshave been added to gitea: gitea \u251c\u2500\u2500 git \u2502 \u2514\u2500\u2500 repositories \u251c\u2500\u2500 gitea \u2502 \u251c\u2500\u2500 conf \u2502 \u2502 \u2514\u2500\u2500 app.ini \u2502 \u251c\u2500\u2500 gitea.db \u2502 \u251c\u2500\u2500 indexers \u2502 \u2502 \u2514\u2500\u2500 issues.bleve \u2502 \u2502 \u251c\u2500\u2500 index_meta.json \u2502 \u2502 \u2514\u2500\u2500 store \u2502 \u251c\u2500\u2500 lfs \u2502 \u251c\u2500\u2500 log \u2502 \u2502 \u251c\u2500\u2500 gitea.log \u2502 \u2502 \u251c\u2500\u2500 http.log \u2502 \u2502 \u2514\u2500\u2500 xorm.log \u2502 \u2514\u2500\u2500 sessions \u2502 \u2514\u2500\u2500 oauth2 \u2514\u2500\u2500 ssh [error opening dir] 11 directories, 7 files","title":"directory structure before adding repos to gitea"},{"location":"#directory-structure-after-adding-repos-to-gitea","text":"After adding a repository: gitea \u251c\u2500\u2500 git \u2502 \u2514\u2500\u2500 repositories \u2502 \u2514\u2500e charlesreid1 \u2502 \u2514\u2500\u2500 oieruoweiur.git \u2502 \u251c\u2500\u2500 branches \u2502 \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 description \u2502 \u251c\u2500\u2500 HEAD \u2502 \u251c\u2500\u2500 hooks \u2502 \u2502 \u251c\u2500\u2500 applypatch-msg.sample \u2502 \u2502 \u251c\u2500\u2500 commit-msg.sample \u2502 \u2502 \u251c\u2500\u2500 post-receive \u2502 \u2502 \u251c\u2500\u2500 post-receive.d \u2502 \u2502 \u2502 \u2514\u2500\u2500 gitea \u2502 \u2502 \u251c\u2500\u2500 post-update.sample \u2502 \u2502 \u251c\u2500\u2500 pre-applypatch.sample \u2502 \u2502 \u251c\u2500\u2500 pre-commit.sample \u2502 \u2502 \u251c\u2500\u2500 prepare-commit-msg.sample \u2502 \u2502 \u251c\u2500\u2500 pre-push.sample \u2502 \u2502 \u251c\u2500\u2500 pre-rebase.sample \u2502 \u2502 \u251c\u2500\u2500 pre-receive \u2502 \u2502 \u251c\u2500\u2500 pre-receive.d \u2502 \u2502 \u2502 \u2514\u2500\u2500 gitea \u2502 \u2502 \u251c\u2500\u2500 pre-receive.sample \u2502 \u2502 \u251c\u2500\u2500 update \u2502 \u2502 \u251c\u2500\u2500 update.d \u2502 \u2502 \u2502 \u2514\u2500\u2500 gitea \u2502 \u2502 \u2514\u2500\u2500 update.sample \u2502 \u251c\u2500\u2500 info \u2502 \u2502 \u251c\u2500\u2500 exclude \u2502 \u2502 \u2514\u2500\u2500 refs \u2502 \u251c\u2500\u2500 objects \u2502 \u2502 \u251c\u2500\u2500 info \u2502 \u2502 \u2502 \u2514\u2500\u2500 packs \u2502 \u2502 \u2514\u2500\u2500 pack \u2502 \u2514\u2500\u2500 refs \u2502 \u251c\u2500\u2500 heads \u2502 \u2514\u2500\u2500 tags \u251c\u2500\u2500 gitea \u2502 \u251c\u2500\u2500 conf \u2502 \u2502 \u2514\u2500\u2500 app.ini \u2502 \u251c\u2500\u2500 gitea.db \u2502 \u251c\u2500\u2500 indexers \u2502 \u2502 \u2514\u2500\u2500 issues.bleve \u2502 \u2502 \u251c\u2500\u2500 index_meta.json \u2502 \u2502 \u2514\u2500\u2500 store \u2502 \u251c\u2500\u2500 lfs \u2502 \u251c\u2500\u2500 log \u2502 \u2502 \u251c\u2500\u2500 gitea.log \u2502 \u2502 \u251c\u2500\u2500 http.log \u2502 \u2502 \u2514\u2500\u2500 xorm.log \u2502 \u2514\u2500\u2500 sessions \u2502 \u2514\u2500\u2500 oauth2 \u2514\u2500\u2500 ssh [error opening dir] 25 directories, 29 files","title":"directory structure after adding repos to gitea"},{"location":"#files-mounted-into-container","text":"","title":"Files Mounted Into Container"},{"location":"#customconf-configuration-file","text":"The conf dir contains configuration files to configure how gitea works. The app.ini file needs to contain two secrets, which are scrubbed in app.ini.sample . The two secrets that are needed are: an \"internal token\" secret, contained in internal_token.secret a \"secret key\" secret, contained in secret_key.secret Use the make_app_ini.sh script to add the two secrets to the document. This will use sed to find/replace instances of the scrubbed secret, and will output the result to custom/conf/app.ini . ./make_app_ini.sh This generates custom/conf/app.ini . When the container is run, this file will be at /data/gitea/conf/app.ini .","title":"custom/conf configuration file"},{"location":"#customtemplates-template-files","text":"The templates directory contains template files. These are gitea templates that control how particular kinds of gitea pages look. For example, a template can be used to modify how the user page looks, or modify the layout of repository main pages. In the container, this will be at /data/gitea/templates/ .","title":"custom/templates template files"},{"location":"#custompages-gitea-pages","text":"The pages directory contains one-off pages or static content that is hosted by gitea at the same domain (git.charlesreid1.com) but not necessarily incorporated into the gitea site. For example, a custom \"about me\" page could be added as a static .html file, and it would be hosted at git.charlesreid1.com/about . In the container, this will be at /data/gitea/pages/ .","title":"custom/pages gitea pages"},{"location":"#using-the-docker-composeyml-file","text":"This directory contains a docker-compose file that can be used to run a gitea server on port 3000. To get the gitea container up and running, $ docker-compose up Now visit <server-ip>:3000 . You will be presented with a configuration page. Set up the gitea instance. This will automatically populate the directory structure. See below for more info. Use this as a project seed to add gitea containers to other docker pods.","title":"Using the docker-compose.yml File"},{"location":"#notes-on-custom-files","text":"The settings in the app.ini file are documented here . An extensive sample app.ini file is here (WARNING: this broke gitea). The existing gitea templates are in the gitea repo under templates/ . These can be modified as needed and placed in the custom/templates/ directory.","title":"Notes on Custom Files"},{"location":"#backing-up-and-restoring-gitea","text":"Fortunately, gitea provides dump functionality. Unfortunately, there is no restore functionality. See pod-charlesreid1/utils-gitea for proper backup/restore scripts.","title":"Backing Up and Restoring Gitea"},{"location":"#executive-summary","text":"Backup: create a backup target directory in the container create a gitea dump zip file using gitea dump command create a gitea avatars zip file copy everything in the backup target directory out of the container remove the backup target directory Restore: create a restore target directory in the container copy gitea dump and gitea avatars zip files into restore target dir unpack dump zip, unpack avatars zip unzip repositories zip (contained in dump zip) restore repositories/ folder to /data/git/repositories/ (skip restoring custom/ files, version control takes care of that) restore sqlite database using sql database dump restore avatars remove the restore target directory","title":"Executive Summary"}]}