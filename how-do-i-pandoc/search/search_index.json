{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"How Do I Pandoc? \u00b6 A simple explanation of how to use pandoc, the C-3PO of documents. Pandoc is a command line tool written in Haskell. It knows many different dialects of document, so it is capable of extracting the content of documents in one format and converting them into another format. Some examples: markdown, github-flavored markdown, reStructured text, HTML, docx, OpenOffice.Org document format, etc. It is also possible to write filters for pandoc to process text in customized ways (e.g., extract all links in a document, or create a table of contents, or turn bold text into strikethrough text). Installing \u00b6 Available through most package managers. See installing pandoc page in the pandoc documentation. $ brew install pandoc $ apt-get install pandoc Quickstart \u00b6 There is a nice getting started guide in the pandoc documentation for those unfamiliar with command-line tools. There is also a user's guide that shows basic usage of pandoc as a command line tool. Common Operations \u00b6 There are a few common operations with pandoc: Converting text from one format to another (basic) Filtering text with pre-written filters (intermediate) Filtering text with custom filters (advanced) Some combination of above There are two ways to use pandoc, covered in each section: Pandoc command line tool - pandoc command Pypandoc API wrapper - pypandoc library","title":"Index"},{"location":"#how-do-i-pandoc","text":"A simple explanation of how to use pandoc, the C-3PO of documents. Pandoc is a command line tool written in Haskell. It knows many different dialects of document, so it is capable of extracting the content of documents in one format and converting them into another format. Some examples: markdown, github-flavored markdown, reStructured text, HTML, docx, OpenOffice.Org document format, etc. It is also possible to write filters for pandoc to process text in customized ways (e.g., extract all links in a document, or create a table of contents, or turn bold text into strikethrough text).","title":"How Do I Pandoc?"},{"location":"#installing","text":"Available through most package managers. See installing pandoc page in the pandoc documentation. $ brew install pandoc $ apt-get install pandoc","title":"Installing"},{"location":"#quickstart","text":"There is a nice getting started guide in the pandoc documentation for those unfamiliar with command-line tools. There is also a user's guide that shows basic usage of pandoc as a command line tool.","title":"Quickstart"},{"location":"#common-operations","text":"There are a few common operations with pandoc: Converting text from one format to another (basic) Filtering text with pre-written filters (intermediate) Filtering text with custom filters (advanced) Some combination of above There are two ways to use pandoc, covered in each section: Pandoc command line tool - pandoc command Pypandoc API wrapper - pypandoc library","title":"Common Operations"},{"location":"converting/","text":"Converting Text \u00b6 To use pandoc to convert text, specify an output file, then feed it input files. You can also specify input and output formats, and use some basic pandoc flags to control how the process goes. To specify an output file, use the -o or --output flag. All other file names passed on the command line are interpreted as input files. For example, to convert text to HTML, we can either convert the text into a fragment of HTML, or into a full, standalone document using the -s or --standalone flag: $ pandoc -o output.html input.txt # generate a fragment of html $ pandoc -s -o output.html input.txt # generate a standalone html document To specify formats, use the -t or --to flag, and the -f or --from flag. For example, converting from Github-flavored Markdown (gfm) to HTML looks like: $ pandoc -f gfm -t html -o my_cool_html_file.html my_cool_markdown_file.md See list of formats . If no output file is specified, output will go to stdout. This enables pandoc to be chained together with other tools into pipelines. In that spirit, input to pandoc can also come from stdin. To make pandoc a component of a data pipeline, simply feed input from stdin and pipe output from stdout: $ cat my_cool_markdown_file.md | pandoc -f gfm -t html | ... We can also generate and convert documents on the fly from the command line: $ echo \"# Hello World [this is the earth](https://earth.com)\" | pandoc -f gfm -t html <h1 id=\"hello-world\">Hello World</h1> <p><a href=\"https://earth.com\">this is the earth</a></p>","title":"Converting Text"},{"location":"converting/#converting-text","text":"To use pandoc to convert text, specify an output file, then feed it input files. You can also specify input and output formats, and use some basic pandoc flags to control how the process goes. To specify an output file, use the -o or --output flag. All other file names passed on the command line are interpreted as input files. For example, to convert text to HTML, we can either convert the text into a fragment of HTML, or into a full, standalone document using the -s or --standalone flag: $ pandoc -o output.html input.txt # generate a fragment of html $ pandoc -s -o output.html input.txt # generate a standalone html document To specify formats, use the -t or --to flag, and the -f or --from flag. For example, converting from Github-flavored Markdown (gfm) to HTML looks like: $ pandoc -f gfm -t html -o my_cool_html_file.html my_cool_markdown_file.md See list of formats . If no output file is specified, output will go to stdout. This enables pandoc to be chained together with other tools into pipelines. In that spirit, input to pandoc can also come from stdin. To make pandoc a component of a data pipeline, simply feed input from stdin and pipe output from stdout: $ cat my_cool_markdown_file.md | pandoc -f gfm -t html | ... We can also generate and convert documents on the fly from the command line: $ echo \"# Hello World [this is the earth](https://earth.com)\" | pandoc -f gfm -t html <h1 id=\"hello-world\">Hello World</h1> <p><a href=\"https://earth.com\">this is the earth</a></p>","title":"Converting Text"},{"location":"filtering_custom/","text":"Filtering Text with Custom Filters \u00b6 This guide will skip most of the details of writing custom filters, since it would rapidly expand the scope of this tutorial. However, we include a few notes about how custom filters work and how to apply them. How Custom Filters Work \u00b6 pandoc converts every document, regardless of structure, into a universal JSON document structure. This is what enables it to convert among formats, and it is also where any document filters are applied. To illustrate: imagine we have some abstract custom filter called foobar that will make all bold text underlined (for example), and we are applying it when converting from Markdown to HTML. The process to apply this filter is as follows: Input fmt --(pandoc)--> JSON -- Filter --> JSON --(pandoc)--> Output fmt In practice, we can create this pipeline on the command line, or from Python. Also note, it is important to use pandoc with the -s (standalone document) flag. Writing Custom Filters \u00b6 See this example for a Panflute filter template. The important parts of a pandoc filter are: Prepare function - run once, before the document is filtered. This is useful for initializing lists, dictionaries, or files. Finalize function - run once, after the document has been filtered. This is useful for doing something with information extracted from the document. Filter actions - these functions are run once for each chunk of text. Each filter action is passed a chunk of text in. If a filter action returns nothing, the section of text is left unmodified. Otherwise, the (filtered) text returned by the function is used in its place. There can be multiple filter actions per document. Main function - this is where the filter is actually applied. Here is a barebones filter: def main(doc=None): return pf.run_filter(action, prepare=prepare, finalize=finalize, doc=doc) def prepare(doc): pass def action(elem, doc): pass def finalize(doc): pass if __name__==\"__main__\": main() Using Custom Filters \u00b6 Command Line \u00b6 Following the example above, let us apply a filter while converting index.md from github flavored markdown to HTML. Start with the initial step, which is markdown to JSON (include the -s flag): $ cat index.md | pandoc -s -f gfm -t json Now this JSON is passed through a filter, which also returns JSON (more details below). If we have a panflute filter that is in the file foobar.py , it will take JSON input and return JSON output. We use it like this: $ cat index.md | pandoc -s -f gfm -t json | python foobar.py This will output filtered JSON text. (More on the filter itself in a moment.) The output from the filter foobar.py can now be passed to another Pandoc process and converted to a document in the same or a different format: $ cat index.md | pandoc -s -f gfm -t json | python foobar.py | pandoc -s -f json -t html -o index.html Lastly, if we make foobar.py into an executable file called foobar by adding the header #!/usr/bin/env python and chmod +x foobar , we can use it as follows: $ cat index.md | pandoc -s -f gfm -t json | foobar | pandoc -s -f json -t html -o index.html Pypandoc \u00b6 Custom filters can also be applied using pypandoc , a thin Python wrapper for the Pandoc command line client.","title":"Filtering with Custom Filters"},{"location":"filtering_custom/#filtering-text-with-custom-filters","text":"This guide will skip most of the details of writing custom filters, since it would rapidly expand the scope of this tutorial. However, we include a few notes about how custom filters work and how to apply them.","title":"Filtering Text with Custom Filters"},{"location":"filtering_custom/#how-custom-filters-work","text":"pandoc converts every document, regardless of structure, into a universal JSON document structure. This is what enables it to convert among formats, and it is also where any document filters are applied. To illustrate: imagine we have some abstract custom filter called foobar that will make all bold text underlined (for example), and we are applying it when converting from Markdown to HTML. The process to apply this filter is as follows: Input fmt --(pandoc)--> JSON -- Filter --> JSON --(pandoc)--> Output fmt In practice, we can create this pipeline on the command line, or from Python. Also note, it is important to use pandoc with the -s (standalone document) flag.","title":"How Custom Filters Work"},{"location":"filtering_custom/#writing-custom-filters","text":"See this example for a Panflute filter template. The important parts of a pandoc filter are: Prepare function - run once, before the document is filtered. This is useful for initializing lists, dictionaries, or files. Finalize function - run once, after the document has been filtered. This is useful for doing something with information extracted from the document. Filter actions - these functions are run once for each chunk of text. Each filter action is passed a chunk of text in. If a filter action returns nothing, the section of text is left unmodified. Otherwise, the (filtered) text returned by the function is used in its place. There can be multiple filter actions per document. Main function - this is where the filter is actually applied. Here is a barebones filter: def main(doc=None): return pf.run_filter(action, prepare=prepare, finalize=finalize, doc=doc) def prepare(doc): pass def action(elem, doc): pass def finalize(doc): pass if __name__==\"__main__\": main()","title":"Writing Custom Filters"},{"location":"filtering_custom/#using-custom-filters","text":"","title":"Using Custom Filters"},{"location":"filtering_custom/#command-line","text":"Following the example above, let us apply a filter while converting index.md from github flavored markdown to HTML. Start with the initial step, which is markdown to JSON (include the -s flag): $ cat index.md | pandoc -s -f gfm -t json Now this JSON is passed through a filter, which also returns JSON (more details below). If we have a panflute filter that is in the file foobar.py , it will take JSON input and return JSON output. We use it like this: $ cat index.md | pandoc -s -f gfm -t json | python foobar.py This will output filtered JSON text. (More on the filter itself in a moment.) The output from the filter foobar.py can now be passed to another Pandoc process and converted to a document in the same or a different format: $ cat index.md | pandoc -s -f gfm -t json | python foobar.py | pandoc -s -f json -t html -o index.html Lastly, if we make foobar.py into an executable file called foobar by adding the header #!/usr/bin/env python and chmod +x foobar , we can use it as follows: $ cat index.md | pandoc -s -f gfm -t json | foobar | pandoc -s -f json -t html -o index.html","title":"Command Line"},{"location":"filtering_custom/#pypandoc","text":"Custom filters can also be applied using pypandoc , a thin Python wrapper for the Pandoc command line client.","title":"Pypandoc"},{"location":"filtering_pre/","text":"Filtering Text with Pre-Written Filters \u00b6 Pandoc has multiple command line options that apply some useful pre-written filters. For a list, just run pandoc --help . Here we cover the most useful filters, and how to use them. Here are a few example filters: $ pandoc --help pandoc [OPTIONS] [FILES] --strip-empty-paragraphs --extract-media=PATH --eol=crlf|lf|native --wrap=auto|none|preserve --columns=NUMBER --strip-comments --toc, --table-of-contents --toc-depth=NUMBER --no-highlight --highlight-style=STYLE|FILE --syntax-definition=FILE --reference-links --reference-location=block|section|document --default-image-extension=extension --email-obfuscation=none|javascript|references Extracting Media \u00b6 A useful filter is the extract media filter. This filter is applied by adding a command line flag to the pandoc call: $ pandoc --extract-media=doc1_media doc1.docx This creates a folder next to doc1.docx with the following structure: $ ls -R doc1.docx doc1_media ./doc1_media: media ./doc1_media/media: embedded_image.png","title":"Filtering with Pre-Written Filters"},{"location":"filtering_pre/#filtering-text-with-pre-written-filters","text":"Pandoc has multiple command line options that apply some useful pre-written filters. For a list, just run pandoc --help . Here we cover the most useful filters, and how to use them. Here are a few example filters: $ pandoc --help pandoc [OPTIONS] [FILES] --strip-empty-paragraphs --extract-media=PATH --eol=crlf|lf|native --wrap=auto|none|preserve --columns=NUMBER --strip-comments --toc, --table-of-contents --toc-depth=NUMBER --no-highlight --highlight-style=STYLE|FILE --syntax-definition=FILE --reference-links --reference-location=block|section|document --default-image-extension=extension --email-obfuscation=none|javascript|references","title":"Filtering Text with Pre-Written Filters"},{"location":"filtering_pre/#extracting-media","text":"A useful filter is the extract media filter. This filter is applied by adding a command line flag to the pandoc call: $ pandoc --extract-media=doc1_media doc1.docx This creates a folder next to doc1.docx with the following structure: $ ls -R doc1.docx doc1_media ./doc1_media: media ./doc1_media/media: embedded_image.png","title":"Extracting Media"}]}