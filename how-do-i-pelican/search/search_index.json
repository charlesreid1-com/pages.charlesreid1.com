{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"How Do I Pelican? \u00b6 This is a simple explanation of how to get started using Pelican to build a static site. It will skip a lot of the details in the interest of simplicity. HTML pages for this tutorial (you are here): https://pages.charlesreid1.com/how-do-i-pelican/ Source code for this tutorial on git.charlesreid1.com: https://git.charlesreid1.com/charlesreid1/how-do-i-pelican Source code for this tutorial on Github: https://github.com/charlesreid1/how-do-i-pelican The outline: Before you start - installing Pelican Getting started with Pelican Configuring your Pelican site Theming your Pelican site Generating your static site Serving your static site Adding content Hosting on Github Pages Also check out the workflows pages for copy-and-paste commands for working with your pelican site: Workflow: Initialization of the Github Pages site WorkflowInit.md Workflow: Update the Github Pages site WorkflowUpdate.md","title":"Index"},{"location":"#how-do-i-pelican","text":"This is a simple explanation of how to get started using Pelican to build a static site. It will skip a lot of the details in the interest of simplicity. HTML pages for this tutorial (you are here): https://pages.charlesreid1.com/how-do-i-pelican/ Source code for this tutorial on git.charlesreid1.com: https://git.charlesreid1.com/charlesreid1/how-do-i-pelican Source code for this tutorial on Github: https://github.com/charlesreid1/how-do-i-pelican The outline: Before you start - installing Pelican Getting started with Pelican Configuring your Pelican site Theming your Pelican site Generating your static site Serving your static site Adding content Hosting on Github Pages Also check out the workflows pages for copy-and-paste commands for working with your pelican site: Workflow: Initialization of the Github Pages site WorkflowInit.md Workflow: Update the Github Pages site WorkflowUpdate.md","title":"How Do I Pelican?"},{"location":"Adding/","text":"Adding content to your site \u00b6 Now that you have generated your site with the pelican command, and have used Python to serve your documentation with a simple HTTP server, you have all the tools you need to start creating content for your website. Also see writing content page of pelican documentation. Pelican has two types of content: pages (unchanging, no chronology) and articles (blog posts). We will cover each below. Adding blog posts to your site \u00b6 Let's cover how you add new content to your site. By default, Pelican is set up to create blog sites, so we'll cover how to create a blog. Creating static sites requires custom themes, and we won't get into that in this document. In the content/ directory (or content/posts/ directory), you create blog posts by adding Markdown files, and specify metadata using a YAML header. Here's a Markdown template for a blog post: Title: My super title Date: 2010-12-03 10:20 Modified: 2010-12-05 19:30 Category: Python Tags: pelican, publishing Slug: my-super-post Authors: Alexis Metaireau, Conan Doyle Summary: Short version for index and feeds This is the content of my super blog post. Note that not everything is necessary (e.g., Slug, Authors, Summary). Ultimately the variables in the YAML headers of each blog post are passed to the theme's page templates, so what information gets used depends on the theme that you use. Adding pages to your site \u00b6 Metadata for Linking to other pages \u00b6 As shown in the linking to internal content section of the pelican docs, you can link to other files article1.md : Title: The first article Date: 2012-12-01 10:02 See below intra-site link examples in Markdown format. [a link to another file]({filename}/article2.md) article2.md : Title: The second article Date: 2012-12-01 10:02 More markdown goes _here_. [link back to article one]({filename}/article1.md) See docs for details. Linking to static files \u00b6 For example, a project\u2019s content directory might be structured like this: Suppose you have a directory structure like this: content \u251c\u2500\u2500 images \u2502 \u2514\u2500\u2500 han.jpg \u251c\u2500\u2500 pdfs \u2502 \u2514\u2500\u2500 menu.pdf \u2514\u2500\u2500 pages \u2514\u2500\u2500 test.md then in test.md you would link to other files like this: ![Alt Text]({filename}/images/han.jpg) [Our Menu]({filename}/pdfs/menu.pdf) See docs for details...","title":"Adding Content"},{"location":"Adding/#adding-content-to-your-site","text":"Now that you have generated your site with the pelican command, and have used Python to serve your documentation with a simple HTTP server, you have all the tools you need to start creating content for your website. Also see writing content page of pelican documentation. Pelican has two types of content: pages (unchanging, no chronology) and articles (blog posts). We will cover each below.","title":"Adding content to your site"},{"location":"Adding/#adding-blog-posts-to-your-site","text":"Let's cover how you add new content to your site. By default, Pelican is set up to create blog sites, so we'll cover how to create a blog. Creating static sites requires custom themes, and we won't get into that in this document. In the content/ directory (or content/posts/ directory), you create blog posts by adding Markdown files, and specify metadata using a YAML header. Here's a Markdown template for a blog post: Title: My super title Date: 2010-12-03 10:20 Modified: 2010-12-05 19:30 Category: Python Tags: pelican, publishing Slug: my-super-post Authors: Alexis Metaireau, Conan Doyle Summary: Short version for index and feeds This is the content of my super blog post. Note that not everything is necessary (e.g., Slug, Authors, Summary). Ultimately the variables in the YAML headers of each blog post are passed to the theme's page templates, so what information gets used depends on the theme that you use.","title":"Adding blog posts to your site"},{"location":"Adding/#adding-pages-to-your-site","text":"Metadata for","title":"Adding pages to your site"},{"location":"Adding/#linking-to-other-pages","text":"As shown in the linking to internal content section of the pelican docs, you can link to other files article1.md : Title: The first article Date: 2012-12-01 10:02 See below intra-site link examples in Markdown format. [a link to another file]({filename}/article2.md) article2.md : Title: The second article Date: 2012-12-01 10:02 More markdown goes _here_. [link back to article one]({filename}/article1.md) See docs for details.","title":"Linking to other pages"},{"location":"Adding/#linking-to-static-files","text":"For example, a project\u2019s content directory might be structured like this: Suppose you have a directory structure like this: content \u251c\u2500\u2500 images \u2502 \u2514\u2500\u2500 han.jpg \u251c\u2500\u2500 pdfs \u2502 \u2514\u2500\u2500 menu.pdf \u2514\u2500\u2500 pages \u2514\u2500\u2500 test.md then in test.md you would link to other files like this: ![Alt Text]({filename}/images/han.jpg) [Our Menu]({filename}/pdfs/menu.pdf) See docs for details...","title":"Linking to static files"},{"location":"Before/","text":"Before You Start \u00b6 You'll need to have Pelican installed. If you want to use Markdown with Pelican, you'll also need to install Markdown. $ pip install Markdown $ pip install pelican Also see installation page of Pelican documentation.","title":"Before You Start"},{"location":"Before/#before-you-start","text":"You'll need to have Pelican installed. If you want to use Markdown with Pelican, you'll also need to install Markdown. $ pip install Markdown $ pip install pelican Also see installation page of Pelican documentation.","title":"Before You Start"},{"location":"Configuring/","text":"Configuring Your Pelican Site \u00b6 The pelicanconf.py file contains all configuration variables that Pelican sites need to set. Some of the configuration variables are common to all Pelican sites, others are particular to the theme you are using. Here's an example configuration file from magic-flying-pelican : pelicanconf.py : AUTHOR = 'charlesreid1' SITENAME = 'how-do-i-pelican' SITEURL = '' PATH = 'content' TIMEZONE = 'America/Los_Angeles' DEFAULT_LANG = 'en' # --------------8<--------------------- # Theme THEME = 'simple-bootstrap' # https://github.com/getpelican/pelican-themes/tree/master/simple-bootstrap # --------------8<--------------------- # Files and content # This will look for a directory img/ # inside the directory content/ # The contents of img/ will be available at # {{ SITEURL }}/img STATIC_PATHS = [ 'img' ] # If we want to create static pages, # we should put them in content/pages PAGE_PATHS = [ 'pages' ] # If we want to create blog posts (articles), # we should put them in content/posts ARTICLE_PATHS = [ 'posts' ] # --------------8<--------------------- # idk just some dumb stuff DISPLAY_PAGES_ON_MENU = False FEED_ALL_ATOM = None CATEGORY_FEED_ATOM = None TRANSLATION_FEED_ATOM = None AUTHOR_FEED_ATOM = None AUTHOR_FEED_RSS = None DEFAULT_PAGINATION = False This will configure the content/ directory to contain a posts/ folder with blog posts and a pages/ folder with static pages. There's a lot more that can be done with the configuration file, but much of it requires custom themes, so we'll leave it at that. See the settings page of the pelican documentation for details.","title":"Configuring Your Pelican Site"},{"location":"Configuring/#configuring-your-pelican-site","text":"The pelicanconf.py file contains all configuration variables that Pelican sites need to set. Some of the configuration variables are common to all Pelican sites, others are particular to the theme you are using. Here's an example configuration file from magic-flying-pelican : pelicanconf.py : AUTHOR = 'charlesreid1' SITENAME = 'how-do-i-pelican' SITEURL = '' PATH = 'content' TIMEZONE = 'America/Los_Angeles' DEFAULT_LANG = 'en' # --------------8<--------------------- # Theme THEME = 'simple-bootstrap' # https://github.com/getpelican/pelican-themes/tree/master/simple-bootstrap # --------------8<--------------------- # Files and content # This will look for a directory img/ # inside the directory content/ # The contents of img/ will be available at # {{ SITEURL }}/img STATIC_PATHS = [ 'img' ] # If we want to create static pages, # we should put them in content/pages PAGE_PATHS = [ 'pages' ] # If we want to create blog posts (articles), # we should put them in content/posts ARTICLE_PATHS = [ 'posts' ] # --------------8<--------------------- # idk just some dumb stuff DISPLAY_PAGES_ON_MENU = False FEED_ALL_ATOM = None CATEGORY_FEED_ATOM = None TRANSLATION_FEED_ATOM = None AUTHOR_FEED_ATOM = None AUTHOR_FEED_RSS = None DEFAULT_PAGINATION = False This will configure the content/ directory to contain a posts/ folder with blog posts and a pages/ folder with static pages. There's a lot more that can be done with the configuration file, but much of it requires custom themes, so we'll leave it at that. See the settings page of the pelican documentation for details.","title":"Configuring Your Pelican Site"},{"location":"Generating/","text":"Generating your static site \u00b6 To generate your static site with Pelican , use the pelican content command, run from the pelican/ directory (see getting started for a guide to the pelican directory layout): $ pelican This will generate the static site content into the output/ folder. Inputs: content/ Output: output/ To modify the input folder, change the PATH variable in pelicanconf.py : PATH = 'my_custom_content_dir' To modify the output directory, set the OUTPUT_PATH variable in pelicanconf.py : OUTPUT_PATH = 'my_custom_output_dir' See the settings page of the pelican documentation for more variables that can be set in the pelicanconf.py file.","title":"Generating Your Pelican Site"},{"location":"Generating/#generating-your-static-site","text":"To generate your static site with Pelican , use the pelican content command, run from the pelican/ directory (see getting started for a guide to the pelican directory layout): $ pelican This will generate the static site content into the output/ folder. Inputs: content/ Output: output/ To modify the input folder, change the PATH variable in pelicanconf.py : PATH = 'my_custom_content_dir' To modify the output directory, set the OUTPUT_PATH variable in pelicanconf.py : OUTPUT_PATH = 'my_custom_output_dir' See the settings page of the pelican documentation for more variables that can be set in the pelicanconf.py file.","title":"Generating your static site"},{"location":"Getting/","text":"Getting Started with Pelican \u00b6 There are a few things you'll need to get started with Pelican : (required) pelicanconf.py - pelican configuration file (required) content/ - directory containing materials to render into a static site (optional) theme - either a local directory containing a theme, or a system-wide pelican theme Use the magic-flying-pelican repository as a seed repo for getting started with Pelican. Basically, copy the contents of the pelican/ directory in magic-flying-pelican into your own repository, and modify the contents for your own static site. We'll walk through what the pelican/ directory contains and what you need to change to get a simple static site up and running. How Pelican Works \u00b6 Let's cover the 101 of how Pelican works. Pelican takes a pile of HTML, markdown, and other files, and compiles them into a static site. (The advantage of using a static site instead of a dynamic server like Flask or a dynamic language like PHP is speed.) To do that, it reads configuration settings from pelicanconf.py , which tell Pelican where to look for the raw files, as well as other settings like the theme to use. The default location of content is the content/ directory, but more can be added. The default behavior for Pelican is to serve a blog with a few static pages, but users can define themes that are static pages only (no blog component). The themes work by providing a set of static files and a set of HTML Jinja templates. Pelican uses the static content and the theme to render the final page. See pelican-themes repository for themes. See live gallery of pelican themes. Repository and Branch Layout \u00b6 When using Pelican to create a static site on Github Pages, you will need to organize your repository and set up branches as follows. Recommended way: project page \u00b6 If you are hosting a project Github Pages site (that is, a Github Pages page for any arbitrary Github project), you should organize your repo as follows: gh-pages branch contains all static content master branch contains the pelican site Uncommon way: personal page \u00b6 If you are hosting a personal Github Pages site (a repository under the account @yourusername called yourusername.github.io ), this should be organized as follows: master branch contains all static content source branch contains the pelican/ directory Clean way: pelican as a separate branch \u00b6 If you have a large project or you really don't want to clutter your repository branch with Pelican files, you can also set up a three-branch model as follows: master branch contains the source code for your project (no Pelican files) source branch contains the Pelican files for your site gh-pages contains all static content for the Github Pages page Directory Layout \u00b6 While Pelican is flexible enough to handle many directory layouts, let's cover a common pattern: putting markdown files into content/ . my-cool-project/ pelican/ pelicanconf.py output/ index.html ... content/ posts/ blog-post-1.md blog-post-2.md blog-post-3.md pages/ faq.md about.md contact.md img/ my-image-1.jpg my-image-2.jpg my-image-3.jpg The pelican directory contains a configuration file pelicanconf.py , a folder with content content/ , and an output directory output/ where the final static files for the site go. (See configuring ). The output/ directory will not be present until you generate site content (see generating ). The output/ directory should be ignored by git. In a later section of this document we will cover a pattern for linking output to a Github Pages site (see workflow: update WorkflowUpdate.md).","title":"Getting Started with Pelican"},{"location":"Getting/#getting-started-with-pelican","text":"There are a few things you'll need to get started with Pelican : (required) pelicanconf.py - pelican configuration file (required) content/ - directory containing materials to render into a static site (optional) theme - either a local directory containing a theme, or a system-wide pelican theme Use the magic-flying-pelican repository as a seed repo for getting started with Pelican. Basically, copy the contents of the pelican/ directory in magic-flying-pelican into your own repository, and modify the contents for your own static site. We'll walk through what the pelican/ directory contains and what you need to change to get a simple static site up and running.","title":"Getting Started with Pelican"},{"location":"Getting/#how-pelican-works","text":"Let's cover the 101 of how Pelican works. Pelican takes a pile of HTML, markdown, and other files, and compiles them into a static site. (The advantage of using a static site instead of a dynamic server like Flask or a dynamic language like PHP is speed.) To do that, it reads configuration settings from pelicanconf.py , which tell Pelican where to look for the raw files, as well as other settings like the theme to use. The default location of content is the content/ directory, but more can be added. The default behavior for Pelican is to serve a blog with a few static pages, but users can define themes that are static pages only (no blog component). The themes work by providing a set of static files and a set of HTML Jinja templates. Pelican uses the static content and the theme to render the final page. See pelican-themes repository for themes. See live gallery of pelican themes.","title":"How Pelican Works"},{"location":"Getting/#repository-and-branch-layout","text":"When using Pelican to create a static site on Github Pages, you will need to organize your repository and set up branches as follows.","title":"Repository and Branch Layout"},{"location":"Getting/#recommended-way-project-page","text":"If you are hosting a project Github Pages site (that is, a Github Pages page for any arbitrary Github project), you should organize your repo as follows: gh-pages branch contains all static content master branch contains the pelican site","title":"Recommended way: project page"},{"location":"Getting/#uncommon-way-personal-page","text":"If you are hosting a personal Github Pages site (a repository under the account @yourusername called yourusername.github.io ), this should be organized as follows: master branch contains all static content source branch contains the pelican/ directory","title":"Uncommon way: personal page"},{"location":"Getting/#clean-way-pelican-as-a-separate-branch","text":"If you have a large project or you really don't want to clutter your repository branch with Pelican files, you can also set up a three-branch model as follows: master branch contains the source code for your project (no Pelican files) source branch contains the Pelican files for your site gh-pages contains all static content for the Github Pages page","title":"Clean way: pelican as a separate branch"},{"location":"Getting/#directory-layout","text":"While Pelican is flexible enough to handle many directory layouts, let's cover a common pattern: putting markdown files into content/ . my-cool-project/ pelican/ pelicanconf.py output/ index.html ... content/ posts/ blog-post-1.md blog-post-2.md blog-post-3.md pages/ faq.md about.md contact.md img/ my-image-1.jpg my-image-2.jpg my-image-3.jpg The pelican directory contains a configuration file pelicanconf.py , a folder with content content/ , and an output directory output/ where the final static files for the site go. (See configuring ). The output/ directory will not be present until you generate site content (see generating ). The output/ directory should be ignored by git. In a later section of this document we will cover a pattern for linking output to a Github Pages site (see workflow: update WorkflowUpdate.md).","title":"Directory Layout"},{"location":"Hosting/","text":"Hosting on Github Pages \u00b6 Now that you've configured your Pelican site, created your content, viewed it, modified it, and are happy with it, you're ready to deploy your site somewhere viewable by the public. Enter Github Pages. Github provides free web hosting for static content for every single repository on Github . That means you can deploy your static site to Github Pages for no-hassle serverless web hosting. (Also see the publish page of the pelican documentation.) Differences between personal and project pages \u00b6 In this walkthrough we assume the most common scenario of deploying a page on Github Pages for a project. Setting up a personal page requires changing branch names - see getting started and the section on branches in particular. Change gh-pages to master and master to source . The rest of the document will assume you are creating a project page. Where is it? \u00b6 Where do Github Pages live? If your username is username and your project name is projectname , the Github source code is at: https://github.com/username/projectname and the Github Pages page will be at: https://username.github.io/projectname Initializing gh-pages branch \u00b6 Before you begin, you have to create a gh-pages branch. We want to create a new branch that is completely independent of all other branches, because this branch will only contain the static content of our website - no code, no readmes, nothing but HTML, CSS, and Javascript. We want to link the gh-pages branch, which will contain the site's static content, with the output/ directory, where Pelican generates all of its static content. Remove the output directory, and clone a copy of your repo to the output directory: $ cd pelican/ $ rm -rf output/ $ git clone https://github.com/username/projectname.git output $ cd output/ Now create a new orphan branch - that's the git terminology for a branch that shares no history with any other branches. Call it gh-pages : $ git checkout --orphan gh-pages Now all the content that was in the master branch will show up as untracked files, because the new gh-pages branch is totally empty. Remove everything in the directory except the .git directory: $ rm -rf * $ rm -rf .gitignore .gitmodules Now add a simple \"Hello world\" page that we'll use to make sure our Github Pages page is being hosted correctly: $ echo '<h2>Hello world!</h2>' > index.html $ git add index.html $ git commit index.html -m 'Initial commit of gh-pages branch' $ git push origin gh-pages Now we have our intiial commit on the gh-pages branch. Enabling Github Pages \u00b6 We have one additional step to cover. After we create the gh-pages branch, we want to tell Github Pages that we have web content on that branch that we want Github to host. Go to the repository settings, and scroll down to the Github Pages setting. Select the drop-down option to host your Github Pages content from the gh-pages branch. Now visit the URL to check out your Hello World page: https://username.github.io/projectname Adding the real content \u00b6 We have a hello world page working, now let's add the real Pelican content. Back in the pelican/ directory, clean out the output/ directory (we'll be making everything from scratch): $ rm -rf output/* Don't remove the output/ directory itself though! Now make the content: $ pelican content Now add the content to the gh-pages branch and push it to Github to deploy it: $ cd output/ $ git add -A . $ git commit -a -m 'Updating site' $ git push origin gh-pages This will push the new static site (this time with the Pelican output) to the gh-pages branch on Github. Sometimes the site updates really fast (few seconds), sometimes it takes longer, but never more than about a minute. Don't forget to add a link to your new page in the repository description (and in your README) to make it easier to find!","title":"Hosting on Github Pages"},{"location":"Hosting/#hosting-on-github-pages","text":"Now that you've configured your Pelican site, created your content, viewed it, modified it, and are happy with it, you're ready to deploy your site somewhere viewable by the public. Enter Github Pages. Github provides free web hosting for static content for every single repository on Github . That means you can deploy your static site to Github Pages for no-hassle serverless web hosting. (Also see the publish page of the pelican documentation.)","title":"Hosting on Github Pages"},{"location":"Hosting/#differences-between-personal-and-project-pages","text":"In this walkthrough we assume the most common scenario of deploying a page on Github Pages for a project. Setting up a personal page requires changing branch names - see getting started and the section on branches in particular. Change gh-pages to master and master to source . The rest of the document will assume you are creating a project page.","title":"Differences between personal and project pages"},{"location":"Hosting/#where-is-it","text":"Where do Github Pages live? If your username is username and your project name is projectname , the Github source code is at: https://github.com/username/projectname and the Github Pages page will be at: https://username.github.io/projectname","title":"Where is it?"},{"location":"Hosting/#initializing-gh-pages-branch","text":"Before you begin, you have to create a gh-pages branch. We want to create a new branch that is completely independent of all other branches, because this branch will only contain the static content of our website - no code, no readmes, nothing but HTML, CSS, and Javascript. We want to link the gh-pages branch, which will contain the site's static content, with the output/ directory, where Pelican generates all of its static content. Remove the output directory, and clone a copy of your repo to the output directory: $ cd pelican/ $ rm -rf output/ $ git clone https://github.com/username/projectname.git output $ cd output/ Now create a new orphan branch - that's the git terminology for a branch that shares no history with any other branches. Call it gh-pages : $ git checkout --orphan gh-pages Now all the content that was in the master branch will show up as untracked files, because the new gh-pages branch is totally empty. Remove everything in the directory except the .git directory: $ rm -rf * $ rm -rf .gitignore .gitmodules Now add a simple \"Hello world\" page that we'll use to make sure our Github Pages page is being hosted correctly: $ echo '<h2>Hello world!</h2>' > index.html $ git add index.html $ git commit index.html -m 'Initial commit of gh-pages branch' $ git push origin gh-pages Now we have our intiial commit on the gh-pages branch.","title":"Initializing gh-pages branch"},{"location":"Hosting/#enabling-github-pages","text":"We have one additional step to cover. After we create the gh-pages branch, we want to tell Github Pages that we have web content on that branch that we want Github to host. Go to the repository settings, and scroll down to the Github Pages setting. Select the drop-down option to host your Github Pages content from the gh-pages branch. Now visit the URL to check out your Hello World page: https://username.github.io/projectname","title":"Enabling Github Pages"},{"location":"Hosting/#adding-the-real-content","text":"We have a hello world page working, now let's add the real Pelican content. Back in the pelican/ directory, clean out the output/ directory (we'll be making everything from scratch): $ rm -rf output/* Don't remove the output/ directory itself though! Now make the content: $ pelican content Now add the content to the gh-pages branch and push it to Github to deploy it: $ cd output/ $ git add -A . $ git commit -a -m 'Updating site' $ git push origin gh-pages This will push the new static site (this time with the Pelican output) to the gh-pages branch on Github. Sometimes the site updates really fast (few seconds), sometimes it takes longer, but never more than about a minute. Don't forget to add a link to your new page in the repository description (and in your README) to make it easier to find!","title":"Adding the real content"},{"location":"Serving/","text":"Serving your static site \u00b6 Once you've run the pelican command to generate your static site, you'll want to see what it looks like. To do this, you need to run a simple HTTP server - nothing fancy. (Now you can see the advantage of a static site.) Run a simple HTTP server with python, which has a built-in HTTP server that can be run from the command line. Run the server from the output/ directory, which contains the static content for your site. $ cd pelican/output/ $ python -m http.server # serve content on localhost:8000 $ python -m http.server 8888 # serve content on localhost:8888 Now navigate to localhost:8000 or localhost:8888 in your browser to view your static site.","title":"Serving Your Static Site"},{"location":"Serving/#serving-your-static-site","text":"Once you've run the pelican command to generate your static site, you'll want to see what it looks like. To do this, you need to run a simple HTTP server - nothing fancy. (Now you can see the advantage of a static site.) Run a simple HTTP server with python, which has a built-in HTTP server that can be run from the command line. Run the server from the output/ directory, which contains the static content for your site. $ cd pelican/output/ $ python -m http.server # serve content on localhost:8000 $ python -m http.server 8888 # serve content on localhost:8888 Now navigate to localhost:8000 or localhost:8888 in your browser to view your static site.","title":"Serving your static site"},{"location":"Theming/","text":"Theming your Pelican site \u00b6 Custom themes are where Pelican becomes really powerful. For this tutorial, though, we'll stick to the basics. See pelican-themes on Github for a full list of themes. See pelicanthemes.com for a gallery of themes. simple-bootstrap theme \u00b6 For this example, we'll use the simple-bootstrap , a simple Bootstrap theme. To use the simple-bootstrap theme, we have to install it. Start by checking out the pelican-themes repo: $ git clone --recursive https://github.com/getpelican/pelican-themes $ cd pelican-themes $ pelican-themes -i simple-bootstrap If you modify or update the theme, you can use the -U flag (for Update) with pelican-themes : $ pelican-themes -U simple-bootstrap Now you can set the gum theme in your pelicanconf.py by setting the THEME variable: THEME=\"simple-bootstrap\"","title":"Theming Your Pelican Site"},{"location":"Theming/#theming-your-pelican-site","text":"Custom themes are where Pelican becomes really powerful. For this tutorial, though, we'll stick to the basics. See pelican-themes on Github for a full list of themes. See pelicanthemes.com for a gallery of themes.","title":"Theming your Pelican site"},{"location":"Theming/#simple-bootstrap-theme","text":"For this example, we'll use the simple-bootstrap , a simple Bootstrap theme. To use the simple-bootstrap theme, we have to install it. Start by checking out the pelican-themes repo: $ git clone --recursive https://github.com/getpelican/pelican-themes $ cd pelican-themes $ pelican-themes -i simple-bootstrap If you modify or update the theme, you can use the -U flag (for Update) with pelican-themes : $ pelican-themes -U simple-bootstrap Now you can set the gum theme in your pelicanconf.py by setting the THEME variable: THEME=\"simple-bootstrap\"","title":"simple-bootstrap theme"}]}